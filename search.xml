<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>备战面试-反射篇</title>
      <link href="/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%8F%8D%E5%B0%84%E7%AF%87/"/>
      <url>/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%8F%8D%E5%B0%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h3 id="获取一个类对应的Class类的方法"><a href="#获取一个类对应的Class类的方法" class="headerlink" title="获取一个类对应的Class类的方法"></a>获取一个类对应的Class类的方法</h3><ul><li><strong>Object.getClass()</strong></li><li><strong>使用类的class成员属性</strong></li><li><strong>Class.forName(“类的完整路径”)</strong></li></ul><hr><h3 id="返回Class类对应的实体类的相关的Class类的方法"><a href="#返回Class类对应的实体类的相关的Class类的方法" class="headerlink" title="返回Class类对应的实体类的相关的Class类的方法"></a>返回Class类对应的实体类的相关的Class类的方法</h3><h4 id="返回当前Class类对应的实体类的父类的Class类"><a href="#返回当前Class类对应的实体类的父类的Class类" class="headerlink" title="返回当前Class类对应的实体类的父类的Class类"></a>返回当前Class类对应的实体类的父类的Class类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;? <span class="keyword">super</span> T&gt; getSuperclass()</span><br></pre></td></tr></table></figure><h4 id="返回类定义的公共的内部类-以及从父类、父接口那里继承来的内部类"><a href="#返回类定义的公共的内部类-以及从父类、父接口那里继承来的内部类" class="headerlink" title="返回类定义的公共的内部类,以及从父类、父接口那里继承来的内部类"></a>返回类定义的公共的内部类,以及从父类、父接口那里继承来的内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getClasses()</span><br></pre></td></tr></table></figure><h4 id="返回类中定义的公共、私有、保护的内部类"><a href="#返回类中定义的公共、私有、保护的内部类" class="headerlink" title="返回类中定义的公共、私有、保护的内部类"></a>返回类中定义的公共、私有、保护的内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getDeclaredClasses()</span><br></pre></td></tr></table></figure><h4 id="获取Class对应类-或者接口-的修饰符"><a href="#获取Class对应类-或者接口-的修饰符" class="headerlink" title="获取Class对应类(或者接口)的修饰符"></a>获取Class对应类(或者接口)的修饰符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><hr><h4 id="获取Class对应的类或者接口的成员Member-成员有：属性，方法-构造方法"><a href="#获取Class对应的类或者接口的成员Member-成员有：属性，方法-构造方法" class="headerlink" title="获取Class对应的类或者接口的成员Member(成员有：属性，方法,构造方法)"></a><strong>获取Class对应的类或者接口的成员Member(成员有：属性，方法,构造方法)</strong></h4><p><strong>java.lang.reflect.Member</strong> 是一个接口，代表 Class 的成员，每个成员都有类型，分为是否从父类继承，还有是否可以直接访问。</p><p><strong>Member</strong> 有三个实现类：</p><ul><li><p><strong>java.lang.reflect.Constructor</strong>：表示该 Class 的构造函数</p></li><li><p><strong>java.lang.reflect.Field</strong>：表示该 Class 的成员变量</p></li><li><p><strong>java.lang.reflect.Method</strong>：表示该 Class 的成员方法</p></li></ul><h5 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h5><ul><li><p>返回构造器数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getDeclaredConstructors();<span class="comment">//返回所有的构造方法的Constructor对象的数组的Constructor对象的数组</span></span><br><span class="line">Constructor&lt;?&gt;[] getConstructors();        <span class="comment">//返回所有共有的构造方法的Constructor对象的数组</span></span><br></pre></td></tr></table></figure></li><li><p>返回指定的一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span>; <span class="comment">//返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 </span></span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span>; <span class="comment">//返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法。</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h5><ul><li><p>获取方法对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method[] getMethods();<span class="comment">//只能获取public修饰的方法数组</span></span><br><span class="line">Method[] getDeclaredMethods();<span class="comment">//可以获取除继承外的所有方法</span></span><br></pre></td></tr></table></figure></li><li><p>获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span>;<span class="comment">//只能获取到public修饰的方法 </span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span>;<span class="comment">//能获取除继承外的方法所有方法(公有，保护，默认，私有)</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h4 id="返回字符串-String-的方法"><a href="#返回字符串-String-的方法" class="headerlink" title="返回字符串(String)的方法"></a>返回字符串(String)的方法</h4><h5 id="获取当前Class表示的类的完整名字-包名-类名"><a href="#获取当前Class表示的类的完整名字-包名-类名" class="headerlink" title="获取当前Class表示的类的完整名字(包名.类名)"></a>获取当前Class表示的类的完整名字(包名.类名)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="获取当前Class表示的实体的简称-类名"><a href="#获取当前Class表示的实体的简称-类名" class="headerlink" title="获取当前Class表示的实体的简称(类名)"></a>获取当前Class表示的实体的简称(类名)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSimpleName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="把对象转换成String"><a href="#把对象转换成String" class="headerlink" title="把对象转换成String"></a>把对象转换成String</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="返回底层类的规范化名称"><a href="#返回底层类的规范化名称" class="headerlink" title="返回底层类的规范化名称"></a>返回底层类的规范化名称</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getCanonicalName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h4 id="返回boolean的方法"><a href="#返回boolean的方法" class="headerlink" title="返回boolean的方法"></a>返回boolean的方法</h4><h5 id="判断当前类是什么类"><a href="#判断当前类是什么类" class="headerlink" title="判断当前类是什么类"></a>判断当前类是什么类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLocalClass</span><span class="params">()</span>     </span>;<span class="comment">//判断是不是局部类，也就是方法里面的类 </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isMemberClass</span><span class="params">()</span>    </span>;<span class="comment">//判断是不是成员内部类，也就是一个类里面定义的类</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnonymousClass</span><span class="params">()</span> </span>;<span class="comment">//判断当前类是不是匿名类，匿名类一般用于实例化接口</span></span><br></pre></td></tr></table></figure><h5 id="其他返回boolean的方法"><a href="#其他返回boolean的方法" class="headerlink" title="其他返回boolean的方法"></a>其他返回boolean的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotation</span><span class="params">()</span> </span>;<span class="comment">//判断当前Class对象是否是注释类型</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span><span class="comment">//如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span><span class="comment">//判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEnum</span><span class="params">()</span><span class="comment">//当且仅当该类声明为源代码中的枚举时返回 true。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInstance</span><span class="params">(Object obj)</span><span class="comment">//判定指定的 Object 是否与此 Class 所表示的对象赋值兼容。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInterface</span><span class="params">()</span><span class="comment">//判定指定的 Class 对象是否表示一个接口类型。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrimitive</span><span class="params">()</span><span class="comment">//判定指定的 Class 对象是否表示一个基本类型。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSynthetic</span><span class="params">()</span><span class="comment">//如果此类是复合类，则返回 true，否则 false。</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备战面试 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-JVM篇</title>
      <link href="/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/"/>
      <url>/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈你对Java的理解"><a href="#谈谈你对Java的理解" class="headerlink" title="谈谈你对Java的理解"></a>谈谈你对Java的理解</h1><ul><li>平台无关性</li><li>GC</li><li>语言特性(泛型、反射、Lamba表达式)</li><li>面向对象</li><li>类库</li><li>异常处理</li></ul><hr><h1 id="Compile-Once，Run-Anywhere如何实现"><a href="#Compile-Once，Run-Anywhere如何实现" class="headerlink" title="Compile Once，Run Anywhere如何实现"></a>Compile Once，Run Anywhere如何实现</h1><p> <img src="/2019/04/17/备战面试-JVM篇/Java编译运行流程.png" alt="Java编译运行流程"></p><p>Java源码首先被编译成字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p><hr><h1 id="为什么JVM不直接将源码解析成机器码去执行"><a href="#为什么JVM不直接将源码解析成机器码去执行" class="headerlink" title="为什么JVM不直接将源码解析成机器码去执行"></a>为什么JVM不直接将源码解析成机器码去执行</h1><ul><li>准备工作：每次执行都需要各种检查</li><li>兼容性：也可以将别的语言解析成字节码</li></ul><hr><h1 id="JVM如何加载-class文件"><a href="#JVM如何加载-class文件" class="headerlink" title="JVM如何加载.class文件"></a>JVM如何加载.class文件</h1><h2 id="Java虚拟机JVM"><a href="#Java虚拟机JVM" class="headerlink" title="Java虚拟机JVM"></a>Java虚拟机JVM</h2><p><img src="/2019/04/17/备战面试-JVM篇/JAVA虚拟机.png" alt="JAVA虚拟机"></p><ul><li><strong>Class Loader</strong>：依据特定格式，加载class文件到内存</li><li><strong>Execution Engine</strong>：对命令进行解析</li><li><strong>Native Interface</strong>：融合不同开发语言的原生库为Java所用</li><li><strong>Runtime Data Area</strong>：JVM内存空间结构模型</li></ul><h2 id="类从编译到执行的过程"><a href="#类从编译到执行的过程" class="headerlink" title="类从编译到执行的过程"></a>类从编译到执行的过程</h2><ul><li>编译器将xxx.java源文件编译为xxx.class字节码文件</li><li>ClassLoader将字节码转换为JVM中的Class<xxx>对象</xxx></li><li>JVM利用Class<xxx>对象实例化为Robot对象</xxx></li></ul><hr><h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><p>ClassLoader在Java中有着非常重要的作用，它主要工作在Class装载的加载阶段，其主要作用是从系统外部获得Class二进制数据流，它是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过将Class文件里的二进制数据流装载进系统，然后交给Java虚拟机进行连接、初始化等操作。</p><h2 id="ClassLoader的种类"><a href="#ClassLoader的种类" class="headerlink" title="ClassLoader的种类"></a>ClassLoader的种类</h2><ul><li><strong>BootStrapClassLoader</strong>：C++编写，加载核心库java.*</li><li><strong>ExtClassLoader</strong>：Java编写，加载扩展库javax.*</li><li><strong>AppClassLoader</strong>：Java编写，加载程序所在目录</li><li><strong>自定义ClassLoader</strong>：Java编写，定制化加载</li></ul><h3 id="自定义ClassLoader的实现"><a href="#自定义ClassLoader的实现" class="headerlink" title="自定义ClassLoader的实现"></a>自定义ClassLoader的实现</h3><p>关键函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len) <span class="keyword">throws</span> ClassFormatError &#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(name, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备战面试 </tag>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（二）：基本原理</title>
      <link href="/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>上一节我们搭建了SpringSecurity的基础环境，并且使用SpringSecurity的默认认证方式完成了认证，这一节主要针对SpringSecuirty的默认配置来说明一下SpringSecurity的原理</p><h1 id="SpringSecurity基本原理"><a href="#SpringSecurity基本原理" class="headerlink" title="SpringSecurity基本原理"></a>SpringSecurity基本原理</h1><p>在上一节完成的默认认证中，我们访问<a href="http://localhost:8080/hello，浏览器自动跳转至http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/hello，浏览器自动跳转至http://localhost:8080/login</a></p><p>实际上，在SpringSecurity中，最核心的部分就是SpringSecurity过滤器链，实际上就是一组过滤器</p><p>我们的所有请求和响应都会通过SpringSecurity的过滤器，这些过滤器，在项目启动时，Springboot会自动将他们加入</p><p>接下来我们依次看一下几个比较核心的过滤器</p><p>在刚才的例子中，我们先后使用了http.formLogin()与http.httpBasic()两种认证方式，事实上，它们都各自对应如下的过滤器</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/1.png" alt></p><p><strong>UsernamePasswordAuthenticationFilter</strong></p><p>该过滤器仅在开启了http.formLogin()时生效，检查请求中是否有用户名和密码，如果有，则尝试使用该用户名和密码进行认证；如果没有，则交给下一过滤器处理</p><p><strong>BasicAuthenticationFilter</strong></p><p>该过滤器检查请求头中是否含有Basic认证信息，如果有，会尝试使用Base64进行解码后的用户名密码进行认证；如果没有，则交给下一过滤器处理</p><p>任何过滤器如果完成了认证，会标记该请求已经认证成功了，后续过滤器则不再检查</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/2.png" alt></p><p>接下来会来到最终的一个过滤器FilterSecurityInterceptor</p><p><strong>FilterSecurityInterceptor</strong></p><p>该过滤器为SpringSecurity过滤器链的最后一环，它将决定请求是否能够访问服务器资源，其依据代码中的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段配置的含义为：任何请求都需要进行身份认证后才可以访问</p><p>然后根据该请求是否通过前面的过滤器的认证标记决定是否允许访问</p><p>如果未通过身份认证，该过滤器会抛出具体未通过认证的原因的异常</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/3.png" alt></p><p>如果抛出异常，在其之前的一个过滤器ExceptionTransiationFilter将会生效</p><p><strong>ExceptionTranslationFilter</strong></p><p>该过滤器负责拦截FilterSecurityInterceptor抛出的异常，根据异常来引导用户进行登录或者进行别的操作</p><p><strong>在这一整条过滤器链上，绿色的部分是可以通过配置控制其是否生效的，除此之外其他的过滤器是无法控制其生效以及顺序</strong></p>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（一）：基础环境</title>
      <link href="/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次使用SpringSecurity还是很久前，只实现了很简单的登录功能，现在SpringCloud大肆横行，Spring全家桶变得尤为重要</p><p>打算从头学习一下SpringSecurity，顺便梳理一下相关的知识</p><hr><h1 id="开发环境以及IDE："><a href="#开发环境以及IDE：" class="headerlink" title="开发环境以及IDE："></a>开发环境以及IDE：</h1><ul><li><p>Windows10_1809</p></li><li><p>Oracle Java 1.8.0_171</p></li><li><p>Apache Maven 3.5.3</p></li><li><p>MYSQL 8.0</p></li><li><p>IntelliJ IDEA</p></li></ul><hr><h1 id="Maven依赖："><a href="#Maven依赖：" class="headerlink" title="Maven依赖："></a>Maven依赖：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h1><h2 id="1-SpringsecurityDemoApplication"><a href="#1-SpringsecurityDemoApplication" class="headerlink" title="1.SpringsecurityDemoApplication"></a>1.SpringsecurityDemoApplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringsecurityDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringsecurityDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-WebSecurityConfig"><a href="#2-WebSecurityConfig" class="headerlink" title="2.WebSecurityConfig"></a>2.WebSecurityConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//        http.httpBasic()</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动项目后，可以在日志中看到这一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using generated security password: ca5b58f9-560b-4a7b-900d-dd85f2fb0353</span><br></pre></td></tr></table></figure></p><p>这就是SpringSecurity为我们默认生成的密码</p><p>这时在浏览器中访问：<a href="http://localhost:8080/hello，会自动跳转到http://localhost:8080/login进行登录" target="_blank" rel="noopener">http://localhost:8080/hello，会自动跳转到http://localhost:8080/login进行登录</a></p><p>用户名填入user，密码填入上面日志中的密码，即可跳转回<a href="http://localhost:8080/hello，在页面上显示hello" target="_blank" rel="noopener">http://localhost:8080/hello，在页面上显示hello</a></p><p>至此，基础环境已经搭建完毕，SpringSecurity为我们默认指定了formLogin的认证方式，如果需要使用httpBasic认证方式，只需要在WebSecurityConfig中改为http.httpBasic()即可</p>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-网络篇</title>
      <link href="/2019/04/15/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
      <url>/2019/04/15/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="OSI开放式互联参考模型"><a href="#OSI开放式互联参考模型" class="headerlink" title="OSI开放式互联参考模型"></a>OSI开放式互联参考模型</h1><p><img src="/2019/04/15/备战面试-网络篇/OSI参考模型.gif" alt="OSI参考模型"></p><hr><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><p><img src="/2019/04/15/备战面试-网络篇/TCPIP协议层次图.png" alt="TCP/IP协议层次图"></p><hr><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="传输控制协议TCP简介"><a href="#传输控制协议TCP简介" class="headerlink" title="传输控制协议TCP简介"></a>传输控制协议TCP简介</h2><ul><li>面向连接的、可靠的、基于字节流的传输层通信协议</li><li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li><li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li><li>使用校验和来校验数据在传输过程中是否有误</li></ul><hr><h2 id="TCP报文头"><a href="#TCP报文头" class="headerlink" title="TCP报文头"></a>TCP报文头</h2><p><img src="/2019/04/15/备战面试-网络篇/TCP报文头.gif" alt="TCP报文头"></p><ol><li><p><strong>端口号</strong>：用来标识同一台计算机的不同的应用进程。</p><ul><li><p><strong>源端口</strong></p><p>源端口和IP地址的作用是标识报文的返回地址。</p></li><li><p><strong>目的端口</strong></p><p>端口指明接收方计算机上的应用程序接口。</p></li></ul></li><li><p><strong>序号和确认号</strong>：是TCP可靠传输的关键部分。<strong>序号</strong>是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p></li><li><p><strong>数据偏移/首部长度</strong>：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p></li><li><p><strong>保留</strong>：为将来定义新的用途保留，现在一般置0。</p></li><li><p><strong>控制位</strong>：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p><ul><li><strong>URG</strong>：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</li><li><strong>ACK</strong>：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</li><li><strong>PSH</strong>：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</li><li><strong>RST</strong>：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</li><li><strong>SYN</strong>：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</li><li><strong>FIN</strong>：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</li></ul></li><li><p><strong>窗口</strong>：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p></li><li><p><strong>校验和</strong>：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p></li><li><p><strong>紧急指针</strong>：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p></li><li><p><strong>选项和填充</strong>：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p></li><li><p><strong>数据部分</strong>： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p></li></ol><hr><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><img src="/2019/04/15/备战面试-网络篇/TCP三次握手.png" alt="三次握手"></p><p>“握手”是为了建立连接，TCP三次握手的流程如下：</p><p><strong>第一次握手</strong>：建立连接时，客户端发送SYN包[syn=j]到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p><strong>第二次握手</strong>：服务器收到SYN包，必须确认客户的SYN[ack=j+1]，同时自己也发送一个SYN包[syn=k]，即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK[ack=k+1]，此包发送完毕，客户端和服务器进入ESTAB-LISHED状态，完成三次握手。</p><hr><h3 id="为什么需要三次握手才能建立起连接"><a href="#为什么需要三次握手才能建立起连接" class="headerlink" title="为什么需要三次握手才能建立起连接"></a>为什么需要三次握手才能建立起连接</h3><p><strong>为了初始化Sequence Number的初始值</strong></p><hr><h3 id="首次握手的隐患——SYN超时"><a href="#首次握手的隐患——SYN超时" class="headerlink" title="首次握手的隐患——SYN超时"></a>首次握手的隐患——SYN超时</h3><p><strong>问题起因分析</strong></p><ul><li><p>Server收到Client的SYN，回复SYN-ACK的时候未收到ACK确认</p></li><li><p>Server不断重试直至超时，Linux默认等待63秒才断开连接（5次重试，每次间隔时间翻倍，间隔识别分别为：1秒，2秒，4秒，8秒，16秒，第五次发出后，还需等待32秒）</p></li></ul><p><strong>针对SYN Flood的防护措施</strong></p><ul><li>SYN队列满后，通过tcp_syncookies参数回发SYN Cookie</li><li>若为正常连接则Client会回发SYN Cookie，直至建立连接</li></ul><hr><h3 id="建立连接后，Client出现故障怎么办"><a href="#建立连接后，Client出现故障怎么办" class="headerlink" title="建立连接后，Client出现故障怎么办"></a>建立连接后，Client出现故障怎么办</h3><p><strong>保活机制</strong></p><ul><li>向对方发送保活探测报文，如果未收到响应则继续发送</li><li>尝试次数达到保活探测数仍未收到响应则中断连接</li></ul><hr><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p>“挥手”是为了终止连接，TCP四次挥手的流程图如下：</p><p><img src="/2019/04/15/备战面试-网络篇/TCP四次挥手.png" alt="TCP四次挥手"></p><p><strong>第一次挥手</strong>：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态；</p><p><strong>第二次挥手</strong>：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态；</p><p><strong>第三次挥手</strong>：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态；</p><p><strong>第四次挥手</strong>：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><hr><h3 id="为什么会有TIME-WAIT状态"><a href="#为什么会有TIME-WAIT状态" class="headerlink" title="为什么会有TIME_WAIT状态"></a>为什么会有TIME_WAIT状态</h3><ul><li><p>确保有足够时间让对方收到ACK包</p></li><li><p>避免新旧连接混淆</p></li></ul><hr><h3 id="为什么需要四次握手才能断开连接"><a href="#为什么需要四次握手才能断开连接" class="headerlink" title="为什么需要四次握手才能断开连接"></a>为什么需要四次握手才能断开连接</h3><p>因为TCP是全双工的，发送方和接收方都需要FIN报文和ACK报文</p><hr><h3 id="服务器出现大量CLOSE-WAIT状态的原因"><a href="#服务器出现大量CLOSE-WAIT状态的原因" class="headerlink" title="服务器出现大量CLOSE_WAIT状态的原因"></a>服务器出现大量CLOSE_WAIT状态的原因</h3><p>对方关闭socket连接，我方忙于读或写，没有及时关闭连接</p><ul><li>检查代码，特别是释放资源的代码</li><li>检查配置，特别是处理请求的线程配置</li></ul><hr><h2 id="TCP的滑动窗口"><a href="#TCP的滑动窗口" class="headerlink" title="TCP的滑动窗口"></a>TCP的滑动窗口</h2><p><strong>TCP使用滑动窗口做流量控制与乱序重排</strong></p><ul><li>保证TCP的可靠性</li><li>保证TCP的流控特性</li></ul><h3 id="RTT和RTO"><a href="#RTT和RTO" class="headerlink" title="RTT和RTO"></a>RTT和RTO</h3><ul><li>RTT：发送一个数据包到收到对应的ACK，所花费的时间</li><li>RTO：重传时间间隔</li></ul><h3 id="窗口数据的计算过程"><a href="#窗口数据的计算过程" class="headerlink" title="窗口数据的计算过程"></a>窗口数据的计算过程</h3><p><img src="/2019/04/15/备战面试-网络篇/窗口数据的计算过程.png" alt="窗口数据的计算过程"></p><p><strong>AdvertisedWindow（接收方还可以处理的数据量） = MaxRcvBuffer（接收方能接收的最大数据量） - (LastByteRcvd - LastByteRead)</strong></p><p><strong>EffectiveWindow（窗口内剩余可发送的数据量） = AdvertisedWindow - (LastByteSend - LastByteAcked)</strong></p><h3 id="TCP的会话发送方"><a href="#TCP的会话发送方" class="headerlink" title="TCP的会话发送方"></a>TCP的会话发送方</h3><p><img src="/2019/04/15/备战面试-网络篇/TCP会话的发送方滑动窗口.png" alt="TCP会话的发送方滑动窗口"></p><h3 id="TCP的会话接收方"><a href="#TCP的会话接收方" class="headerlink" title="TCP的会话接收方"></a>TCP的会话接收方</h3><p><img src="/2019/04/15/备战面试-网络篇/TCP会话的接收方滑动窗口.png" alt="TCP会话的接收方滑动窗口"></p><hr><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="UDP报文结构"><a href="#UDP报文结构" class="headerlink" title="UDP报文结构"></a>UDP报文结构</h2><p><img src="/2019/04/15/备战面试-网络篇/UDP报文结构.png" alt="UDP报文结构"></p><hr><h2 id="UDP的特点"><a href="#UDP的特点" class="headerlink" title="UDP的特点"></a>UDP的特点</h2><ul><li>面向非连接</li><li>不维护连接状态，支持同时向多个客户端传输相同的消息</li><li>数据包报头只有8个字节，额外开销较小</li><li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li><li>尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表</li><li>面向报文，不对应用程序提交的报文信息进行拆分或者合并</li></ul><hr><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><ul><li>面向连接 vs 无连接</li><li>可靠性</li><li>有序性</li><li>速度</li><li>量级</li></ul><hr><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li>支持客户/服务器模式</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ul><hr><h2 id="请求结构"><a href="#请求结构" class="headerlink" title="请求结构"></a>请求结构</h2><p><img src="/2019/04/15/备战面试-网络篇/HTTP请求结构.png" alt="HTTP请求结构"></p><hr><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><p><img src="/2019/04/15/备战面试-网络篇/HTTP响应结构.png" alt="HTTP响应结构"></p><hr><h2 id="请求-响应的步骤"><a href="#请求-响应的步骤" class="headerlink" title="请求/响应的步骤"></a>请求/响应的步骤</h2><ul><li>客户端连接到Web服务器</li><li>发送HTTP请求</li><li>服务器接受请求并返回HTTP响应</li><li>释放TCP连接</li><li>客户端浏览器解析HTML内容</li></ul><hr><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><h3 id="五种可能的情况"><a href="#五种可能的情况" class="headerlink" title="五种可能的情况"></a>五种可能的情况</h3><ul><li>1xx：指示信息，表示请求已接收，继续处理</li><li>2xx：成功，表示请求已被成功接收、理解、接受</li><li>3xx：重定向，要完成请求必须完成更进一步的操作</li><li>4xx：客户端错误，请求有语法错误或请求无法实现</li><li>5xx：服务端错误，服务器未能实现合法的请求</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 OK：正常返回信息</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务</li><li>404 Not Found：请求资源不存在，eg，输入了错误的URL</li><li>500 Internal Server Error：服务器发生不可预期的错误</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><hr><h2 id="在浏览器地址栏键入URL，按下回车之后经历的流程"><a href="#在浏览器地址栏键入URL，按下回车之后经历的流程" class="headerlink" title="在浏览器地址栏键入URL，按下回车之后经历的流程"></a>在浏览器地址栏键入URL，按下回车之后经历的流程</h2><ul><li>DNS解析(浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存)</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul><hr><h2 id="GET请求和POST请求的区别"><a href="#GET请求和POST请求的区别" class="headerlink" title="GET请求和POST请求的区别"></a>GET请求和POST请求的区别</h2><p>从三个层面来解答</p><ul><li>HTTP报文层面：GET将请求信息放在URL，POST放在报文体中</li><li>数据库层面：GET符合幂等性和安全性，POST不符合</li><li>其他层面：GET可以被缓存、被存储，而POST不行</li></ul><hr><h2 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h2><h3 id="Cookie简介"><a href="#Cookie简介" class="headerlink" title="Cookie简介"></a>Cookie简介</h3><ul><li>是由服务器发给客户端的特殊信息，以文本的形式存放在客户端</li><li>客户端再次请求的时候，会把Cookie回发</li><li>服务器接收到后，会解析Cookie生成与客户端相对应的内容</li></ul><h3 id="Cookie的设置以及发送过程"><a href="#Cookie的设置以及发送过程" class="headerlink" title="Cookie的设置以及发送过程"></a>Cookie的设置以及发送过程</h3><p><img src="/2019/04/15/备战面试-网络篇/Cookie的设置以及发送过程.png" alt="Cookie的设置以及发送过程"></p><h3 id="Session简介"><a href="#Session简介" class="headerlink" title="Session简介"></a>Session简介</h3><ul><li>服务器端的机制，在服务器上保存的信息</li><li>解析客户端请求并操作session id，按需保存状态信息</li></ul><h3 id="Session的实现方式"><a href="#Session的实现方式" class="headerlink" title="Session的实现方式"></a>Session的实现方式</h3><ul><li><p>使用Cookie来实现</p><p><img src="/2019/04/15/备战面试-网络篇/Session实现方式-使用Cookie来实现.png" alt="Session实现方式-使用Cookie来实现"></p></li><li><p>使用URL回写来实现</p></li></ul><h3 id="Cookie和Session的区别-1"><a href="#Cookie和Session的区别-1" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h3><ul><li>Cookie数据存放在客户的浏览器，Session数据放在服务器上</li><li>Session相对于Cookie更安全</li><li>若考虑减轻服务器负担，应当使用Cookie</li></ul><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 </p><h3 id="SSL（Security-Sockets-Layer，安全套接层）"><a href="#SSL（Security-Sockets-Layer，安全套接层）" class="headerlink" title="SSL（Security Sockets Layer，安全套接层）"></a>SSL（Security Sockets Layer，安全套接层）</h3><ul><li>为网络通信提供安全及数据完整性的一种安全协议</li><li>是操作系统对外的API，SSL3.0后更名为TLS</li><li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li></ul><h3 id="加密的方式"><a href="#加密的方式" class="headerlink" title="加密的方式"></a>加密的方式</h3><ul><li>对称加密：加密和解密都使用同一个密钥</li><li>非对称加密：加密使用的密钥和解密使用的密钥是不相同的（公钥、私钥）</li><li>哈希算法：将任意长度的信息转换为固定长度的值，算法不可逆</li><li>数字签名：证明某个消息或者文件是某人发出/认同的</li></ul><h3 id="HTTPS数据传输流程"><a href="#HTTPS数据传输流程" class="headerlink" title="HTTPS数据传输流程"></a>HTTPS数据传输流程</h3><ul><li>浏览器将支持的加密算法信息发送给服务器</li><li>服务器选择一套浏览器支持的加密算法，以证书的形式回发浏览器</li><li>浏览器验证证书合法性，并结合证书公钥加密信息发送给服务器</li><li>服务器使用私钥解密信息，验证哈希，加密响应消息回发浏览器</li><li>浏览器解密响应消息，并对消息进行验真，之后进行加密交互数据</li></ul><h3 id="HTTP和HTTPS的区别-1"><a href="#HTTP和HTTPS的区别-1" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h3><ul><li>HTTPS需要到CA申请证书，HTTP不需要</li><li>HTTPS密文传输，HTTP明文传输</li><li>连接方式不同，HTTP默认使用443端口，HTTP使用80端口</li><li>HTTPS = HTTP + 加密 + 认证 + 完整性保护，较HTTP安全</li></ul><h3 id="HTTPS真的很安全吗"><a href="#HTTPS真的很安全吗" class="headerlink" title="HTTPS真的很安全吗"></a>HTTPS真的很安全吗</h3><p><strong>浏览器默认填充http://，请求需要认证跳转，有被劫持的风险。可以使用HSTS(HTTP Strict Transport Security)优化。</strong></p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="Socket简介"><a href="#Socket简介" class="headerlink" title="Socket简介"></a>Socket简介</h2><p><strong>Socket是对TCP/IP协议的抽象，是操作系统对外开放的接口</strong></p><p><img src="/2019/04/15/备战面试-网络篇/Socket.png" alt="Socket"></p><h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h2><p><img src="/2019/04/15/备战面试-网络篇/Socket通信流程.png" alt="Socket通信流程"></p>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备战面试 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-多线程篇</title>
      <link href="/2019/04/13/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/"/>
      <url>/2019/04/13/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Thread的六个状态"><a href="#Thread的六个状态" class="headerlink" title="Thread的六个状态"></a>Thread的六个状态</h3><ol><li><p><strong>新建(New):创建后尚未启动的线程的状态</strong></p></li><li><p><strong>运行(Runnable):包含Running和Ready</strong></p></li><li><p><strong>无限等待期(Waiting):不会被分配CPU执行时间，需要显式被唤醒</strong></p><blockquote><p>以下为会将线程变为无限等待期的方法：</p><ul><li>没有设置Timeout参数的Object.wait()方法</li><li>没有设置Timeout参数的Thread.join()方法</li><li>LockSupport.park()方法</li></ul></blockquote></li><li><p><strong>限期等待(Timed Waiting):在一定时间后会由系统自动唤醒</strong></p><blockquote><p>以下为会将线程变限期等待的方法：</p><ul><li>Thread.sleep()方法</li><li>设置了Timeout参数的Object.wait()方法</li><li>设置了Timeout参数的Thread.join()方法</li><li>LockSupport.parkNanos()方法</li><li>LockSupport.parkUntil()方法</li></ul></blockquote></li><li><p><strong>阻塞(Blocked):等待获取排它锁</strong></p></li><li><p><strong>结束(Terminated):已终止线程的状态，线程已经结束执行</strong></p></li></ol><hr><h3 id="sleep和wait"><a href="#sleep和wait" class="headerlink" title="sleep和wait"></a>sleep和wait</h3><ol><li>sleep()是Thread的方法，wait()是Object的方法</li><li>sleep()可以在任何地方使用，wait()只能在synchronized方法或synchronized块中使用</li><li>sleep()只会让出CPU，不会导致锁行为的改变</li><li>wait()不仅让出CPU,还会释放已经占有的同步资源锁</li></ol><hr><h3 id="notify-和notifyAll"><a href="#notify-和notifyAll" class="headerlink" title="notify()和notifyAll()"></a>notify()和notifyAll()</h3><p>​     <strong>首先了解两个概念：</strong></p><ul><li><p>锁池EntryList<br>假设线程A已经拥有了某个对象(不是类)的锁，而其它线程B、C想要调用这个对象的某个synchronized方法(或者块)，由于B、C线程在进入对象的synchronized方法(或者块)之前必须先获得该对象锁的拥有权，而恰巧该对象的锁目前正被线程A所占用，此时B、C线程就会被阻塞，进入一个地方去等待锁的释放，这个地方便是该对象的锁池</p></li><li><p>等待池WaitSet<br>假设线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁，同时线程A就进入到了该对象的等待池中，进入到等待池中的线程不会去竞争该对象的锁</p></li></ul><p><strong>notifyAll()会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</strong></p><p><strong>notify()只会随机选取一个处于等待池中的进程进入锁池去竞争获取锁的机会</strong></p><hr><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>当调用Thread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽视这个暗示。<br>yield()不会对锁造成影响</p><hr><h3 id="如何中断线程"><a href="#如何中断线程" class="headerlink" title="如何中断线程"></a>如何中断线程</h3><p>已经被抛弃的方法</p><ul><li>通过调用stop()方法停止线程</li><li>通过调用suspend()和resume()方法</li></ul><p>目前使用的方法</p><ul><li>调用interrupt()，通知线程应该中断了<ol><li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。</li><li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为true。被设置中断标志的线程将继续正常运行，不受影响。</li></ol></li><li>需要被调用的线程配合中断<ol><li>在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程。</li><li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为true</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备战面试 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
