<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重学SpringSecurity5（五）：认证流程原理</title>
      <link href="/2019/04/23/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%9A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86/"/>
      <url>/2019/04/23/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%9A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="认证处理流程说明"><a href="#认证处理流程说明" class="headerlink" title="认证处理流程说明"></a>认证处理流程说明</h1><p><img src="/2019/04/23/重学SpringSecurity5 第五节：认证流程原理/认证处理流程.png" alt></p><h2 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String username = <span class="keyword">this</span>.obtainUsername(request);</span><br><span class="line">        String password = <span class="keyword">this</span>.obtainPassword(request);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            username = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            password = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        username = username.trim();</span><br><span class="line">        UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">        <span class="keyword">this</span>.setDetails(request, authRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表单登录的第一步，首先进入该方法，该方法主要的逻辑为：</p><ol><li>判断是否为POST方法</li><li>判断用户名密码是否为空</li><li>创建一个UsernamePasswordAuthenticationToken</li><li>setDetails会将请求的一些信息放入上一步创建的UsernamePasswordAuthenticationToken中</li><li>调用AuthenticationManager</li></ol><hr><h3 id="UsernamePasswordAuthenticationToken"><a href="#UsernamePasswordAuthenticationToken" class="headerlink" title="UsernamePasswordAuthenticationToken"></a>UsernamePasswordAuthenticationToken</h3><p>通过查看其继承关系，它其实是<strong>AbstractAuthenticationToken</strong>的一个子类，而<strong>AbstractAuthenticationToken</strong>是一个实现了<strong>Authentication</strong>接口的抽象类</p><p>我们首先来看一下它的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.principal = principal;</span><br><span class="line">    <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">    setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，先调用父类的构造方法，传入null，然后将username和password缓存</p><p>然后将Authenticated设置为false，意为未认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractAuthenticationToken</span><span class="params">(Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (authorities == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = AuthorityUtils.NO_AUTHORITIES;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (GrantedAuthority a : authorities) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">"Authorities collection cannot contain any null elements"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;GrantedAuthority&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">        authorities.size());</span><br><span class="line">    temp.addAll(authorities);</span><br><span class="line">    <span class="keyword">this</span>.authorities = Collections.unmodifiableList(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开父类的构造方法，发现其要求传入一个权限列表</p><p>当前为未认证状态，所以并不知道拥有哪些权限，所以此时传入null</p><hr><h2 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h2><p>AuthenticationManager其实只是一个管理类，管理众多的AuthenticationProvider，通过查看其实现类ProviderManager源码中的关键代码可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">                         + provider.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                copyDetails(authentication, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> ...</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它完成的工作是依次调用所有的AuthenticationProvider的supports方法，将Authentication对象传入，查看这个provider是否支持处理这种类型的Authentication来进行认证</p><p>如果发现可以来处理该认证方式的AuthenticationProvider，则会去调用其的authenticate方法</p><h2 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h2><p>我们当前的认证方式，与其匹配的AuthenticationProvider为DaoAuthenticationProvider，我们查看其源代码发现其并没有重写authenticate方法，而沿用其父类AbstractUserDetailsAuthenticationProvider的authenticate方法，我们查看其源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUserDetailsAuthenticationProvider</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">AuthenticationProvider</span>, <span class="title">InitializingBean</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preAuthenticationChecks.check(user);</span><br><span class="line">additionalAuthenticationChecks(user,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line"><span class="keyword">if</span> (cacheWasUsed) &#123;</span><br><span class="line"><span class="comment">// There was a problem, so try again after checking</span></span><br><span class="line"><span class="comment">// we're using latest data (i.e. not from the cache)</span></span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">preAuthenticationChecks.check(user);</span><br><span class="line">additionalAuthenticationChecks(user,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> exception;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line"><span class="keyword">this</span>.userCache.putUserInCache(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">principalToReturn = user.getUsername();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到它先调用了<strong>retrieveUser</strong>方法，通过查看，该方法属于抽象方法，DaoAuthenticationProvider的实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> UserDetails <span class="title">retrieveUser</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    prepareTimingAttackProtection();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        UserDetails loadedUser = <span class="keyword">this</span>.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (loadedUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(</span><br><span class="line">                <span class="string">"UserDetailsService returned null, which is an interface contract violation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadedUser;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这么一句<strong>getUserDetailsService().loadUserByUsername(username)</strong></p><p>这便是我们之前实现的UserDetailsService中的方法，根据用户名获取UserDetails实例</p><p>接下来从UserDetailsService中拿到用户实例后，便执行了<strong>preAuthenticationChecks.check(user)</strong>，对用户进行预检查</p><p>我们查看其源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPreAuthenticationChecks</span> <span class="keyword">implements</span> <span class="title">UserDetailsChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(UserDetails user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"User account is locked"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(messages.getMessage(</span><br><span class="line">                <span class="string">"AbstractUserDetailsAuthenticationProvider.locked"</span>,</span><br><span class="line">                <span class="string">"User account is locked"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"User account is disabled"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(messages.getMessage(</span><br><span class="line">                <span class="string">"AbstractUserDetailsAuthenticationProvider.disabled"</span>,</span><br><span class="line">                <span class="string">"User is disabled"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"User account is expired"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountExpiredException(messages.getMessage(</span><br><span class="line">                <span class="string">"AbstractUserDetailsAuthenticationProvider.expired"</span>,</span><br><span class="line">                <span class="string">"User account has expired"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其对我们之前实现的UserDetails中的四个boolean方法中的三个进行了检查(锁定，启用，账户过期)</p><p>接下来接着看AbstractUserDetailsAuthenticationProvider类中的authenticate方法，其在做完预检查后执行了以下一句话：<strong>additionalAuthenticationChecks(user,  authentication)</strong></p><p>对用户进行附加检查，我们通过查看其源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails,</span></span></span><br><span class="line"><span class="function"><span class="params">UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (authentication.getCredentials() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Authentication failed: no credentials provided"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">            <span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">            <span class="string">"Bad credentials"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String presentedPassword = authentication.getCredentials().toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Authentication failed: password does not match stored value"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">            <span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">            <span class="string">"Bad credentials"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在这里调用了PasswordEncoder的matches方法来验证密码是否匹配</p><p>最后调用了<strong>postAuthenticationChecks.check(user)</strong>来进行最后一次检查，查看其源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPostAuthenticationChecks</span> <span class="keyword">implements</span> <span class="title">UserDetailsChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(UserDetails user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.isCredentialsNonExpired()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"User account credentials have expired"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CredentialsExpiredException(messages.getMessage(</span><br><span class="line">                <span class="string">"AbstractUserDetailsAuthenticationProvider.credentialsExpired"</span>,</span><br><span class="line">                <span class="string">"User credentials have expired"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查了该账户的凭证(密码)是否过期，也就是我们的UserDetails中的其中一个boolean方法，加上之前的预检查，UserDetails中的四个返回值为boolean的方法至此已检查完毕</p><p>当所有检查都通过后，就认为用户认证是成功的，最终会返回<strong>createSuccessAuthentication(principalToReturn, authentication, user)</strong>，通过查看其源码，本质就是再次调用了UsernamePasswordAuthenticationToken的构造方法，但是与之前不同的是，这次调用的是UsernamePasswordAuthenticationToken的三个参数的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(authorities);</span><br><span class="line">    <span class="keyword">this</span>.principal = principal;</span><br><span class="line">    <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">    <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>); <span class="comment">// must use super, as we override</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即多传入了用户的权限，以及setAuthenticated为true，表明认证已成功</p><p>此时认证流程已经结束，这个<strong>UsernamePasswordAuthenticationToken</strong>将会被返回至<strong>UsernamePasswordAuthenticationFilter</strong>中</p><p>在完成认证流程后，<strong>AbstractAuthenticationProcessingFilter</strong>会调用<strong>successfulAuthentication(request, response, chain, authResult)</strong>方法，查看其源代码可以发现其最终调用的是<strong>successHandler.onAuthenticationSuccess(request, response, authResult)</strong>，这便是我们上一节配置的处理验证成功的handler</p><p>以上为验证成功的处理流程，如果在三次检查的过程中，有任何一处未通过，会抛出<strong>AuthenticationException</strong>它的子类异常，会被<strong>AbstractAuthenticationProcessingFilter</strong>捕获到，进入到认证失败的流程，即调用<strong>unsuccessfulAuthentication(request, response, exception)</strong>方法，通过查看源代码可以看到其最终调用了<strong>failureHandler.onAuthenticationFailure(request, response, failed)</strong>，也就是我们上一节配置的处理验证失败的handler</p><h1 id="认证结果如何在多个请求之间共享"><a href="#认证结果如何在多个请求之间共享" class="headerlink" title="认证结果如何在多个请求之间共享"></a>认证结果如何在多个请求之间共享</h1><p><img src="/2019/04/23/重学SpringSecurity5 第五节：认证流程原理/认证结果如何在多个请求之间共享.png" alt="认证结果如何在多个请求之间共享"></p><p>在进行认证并且认证成功的最后一步，即在<strong>AbstractAuthenticationProcessingFilter</strong>中的<strong>doFilter</strong>方法调用<strong>successfulAuthentication(request, response, chain, authResult)</strong>时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span> + authResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">    <span class="keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到一句话<strong>SecurityContextHolder.getContext().setAuthentication(authResult)</strong>，这便是将认证结果即<strong>Authentication</strong>对象放入<strong>SecurityContext</strong>中，再将其放入<strong>SecurityContextHolder</strong>的过程</p><h2 id="SecurityContext"><a href="#SecurityContext" class="headerlink" title="SecurityContext"></a>SecurityContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextImpl</span> <span class="keyword">implements</span> <span class="title">SecurityContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ~ Instance fields</span></span><br><span class="line"><span class="comment">// ================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Authentication authentication;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SecurityContextImpl</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SecurityContextImpl</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.authentication = authentication;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ~ Methods</span></span><br><span class="line"><span class="comment">// ========================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SecurityContextImpl) &#123;</span><br><span class="line">SecurityContextImpl test = (SecurityContextImpl) obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.getAuthentication() == <span class="keyword">null</span>) &amp;&amp; (test.getAuthentication() == <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.getAuthentication() != <span class="keyword">null</span>) &amp;&amp; (test.getAuthentication() != <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; <span class="keyword">this</span>.getAuthentication().equals(test.getAuthentication())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">getAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> authentication;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.authentication == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.authentication.hashCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthentication</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.authentication = authentication;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="keyword">super</span>.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.authentication == <span class="keyword">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">": Null authentication"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sb.append(<span class="string">": Authentication: "</span>).append(<span class="keyword">this</span>.authentication);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看其实现类<strong>SecurityContextImpl</strong>的源码，可以发现其实它就是一个对于<strong>Authentication</strong>的封装，并重写了其toString()方法和equals()方法</p><h2 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h2><p>通过查看其源码，可以看到它其实就是对于<strong>SecurityContextHolderStrategy</strong>的一次封装，而<strong>SecurityContextHolderStrategy</strong>的默认实现，实际上就是一个<strong>ThreadLocal</strong>的封装，所以其本质上就相当于是一个<strong>ThreadLocal</strong></p><p>关于ThreadLocal，其实它就是一种将变量和线程绑定的方式，在每个线程中都存在一个线程安全的变量，具体可以查看<a href="https://www.jianshu.com/p/56f64e3c1b6c" target="_blank" rel="noopener">深入理解 ThreadLocal</a></p><h2 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a>SecurityContextPersistenceFilter</h2><p><img src="/2019/04/23/重学SpringSecurity5 第五节：认证流程原理/SecurityContextPersistenceFilter.png" alt></p><p>它在SpringSecurity过滤器链上的位置如上图所示，位于过滤器链的最前面，其主要作用如下：</p><ul><li>当请求进入SpringSecurity过滤器链时，检查session中是否存在SecurityContext，如果有，就将其放入线程中</li><li>当响应返回用户时，检查线程中是否有SecurityContext，如果有，就将其放入session中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（四）：个性化用户认证流程</title>
      <link href="/2019/04/23/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%9A%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/04/23/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%9A%E4%B8%AA%E6%80%A7%E5%8C%96%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="实现个性化登录页面"><a href="#实现个性化登录页面" class="headerlink" title="实现个性化登录页面"></a>实现个性化登录页面</h1><p>在WebSecurityConfig中修改如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    http.formLogin()</span><br><span class="line">        .loginPage(<span class="string">"/mylogin.html"</span>) <span class="comment">//设置登录页面路径</span></span><br><span class="line">        .loginProcessingUrl(<span class="string">"/authentication/form"</span>) <span class="comment">//设置认证路径</span></span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/mylogin.html"</span>).permitAll()  <span class="comment">//放行/mylogin.html访问</span></span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下新建resources/mylogin.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的个性化登录页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/authentication/form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="处理不同类型的请求"><a href="#处理不同类型的请求" class="headerlink" title="处理不同类型的请求"></a>处理不同类型的请求</h1><h2 id="功能流程图"><a href="#功能流程图" class="headerlink" title="功能流程图"></a>功能流程图</h2><p><img src="/2019/04/23/重学SpringSecurity5 第四节：个性化用户认证流程/处理不同类型的请求.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>BrowserSecurityController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(BrowserSecurityController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RequestCache requestCache = <span class="keyword">new</span> HttpSessionRequestCache();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/authentication/require"</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(code = HttpStatus.UNAUTHORIZED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleResponse <span class="title">requireAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取springsecurity缓存的request</span></span><br><span class="line">        SavedRequest savedRequest = requestCache.getRequest(request, response);</span><br><span class="line">        <span class="keyword">if</span> (savedRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String target = savedRequest.getRedirectUrl();</span><br><span class="line">            logger.info(<span class="string">"引发跳转的请求是：&#123;&#125;"</span>, target);</span><br><span class="line">            <span class="comment">//判断用户访问的路径是否以.html结尾</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.endsWithIgnoreCase(target, <span class="string">".html"</span>)) &#123;</span><br><span class="line">                <span class="comment">//重定向到登录页面</span></span><br><span class="line">                redirectStrategy.sendRedirect(request, response, <span class="string">"/mylogin.html"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回JSON</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleResponse(<span class="string">"访问的服务需要身份认证"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SimpleResponse.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleResponse</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WebSecurityConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    http.formLogin()</span><br><span class="line">        .loginPage(<span class="string">"/authentication/require"</span>)</span><br><span class="line">        .loginProcessingUrl(<span class="string">"/authentication/form"</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/mylogin.html"</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">"/authentication/require"</span>).permitAll()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义登录成功-失败处理"><a href="#自定义登录成功-失败处理" class="headerlink" title="自定义登录成功/失败处理"></a>自定义登录成功/失败处理</h1><p>SpringSecurity为我们提供了两个接口：<strong>AuthenticationSuccessHandler</strong>，<strong>AuthenticationFailureHandler</strong>，这两个接口就是用来自定义成功和失败的逻辑</p><p>分别来实现一下：</p><p><strong>MyAuthenticationSuccessHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myAuthenticationSuccessHandler"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"登录成功"</span>);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(authentication));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MyAuthenticationFailureHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myAuthenticationFailureHandler"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"登录失败"</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后在WebSecurityConfig中配置一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler myAuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationFailureHandler myAuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    http.formLogin()</span><br><span class="line">        .loginPage(<span class="string">"/authentication/require"</span>)</span><br><span class="line">        .loginProcessingUrl(<span class="string">"/authentication/form"</span>)</span><br><span class="line">        .successHandler(myAuthenticationSuccessHandler)</span><br><span class="line">        .failureHandler(myAuthenticationFailureHandler)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/mylogin.html"</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">"/authentication/require"</span>).permitAll()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-Redis篇</title>
      <link href="/2019/04/22/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-Redis%E7%AF%87/"/>
      <url>/2019/04/22/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-Redis%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><h2 id="主流应用架构-缓存层"><a href="#主流应用架构-缓存层" class="headerlink" title="主流应用架构(缓存层)"></a>主流应用架构(缓存层)</h2><p><img src="/2019/04/22/备战面试-Redis篇/主流应用架构.png" alt="主流应用架构"></p><h2 id="缓存中间件——Memcache和Redis的区别"><a href="#缓存中间件——Memcache和Redis的区别" class="headerlink" title="缓存中间件——Memcache和Redis的区别"></a>缓存中间件——Memcache和Redis的区别</h2><h3 id="Memcache：代码层次类似Hash"><a href="#Memcache：代码层次类似Hash" class="headerlink" title="Memcache：代码层次类似Hash"></a>Memcache：代码层次类似Hash</h3><ul><li>支持简单数据类型</li><li>不支持数据持久化存储</li><li>不支持主从</li><li>不支持分片</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>数据类型丰富</li><li>支持数据磁盘持久化存储</li><li>支持主从</li><li>支持分片</li></ul><h2 id="为什么Redis能这么快"><a href="#为什么Redis能这么快" class="headerlink" title="为什么Redis能这么快"></a>为什么Redis能这么快</h2><p><strong>100000+QPS(QPS即query per second，每秒内查询次数)</strong></p><ul><li>完全基于内存，绝大部分请求是纯粹的内存操作，执行效率高</li><li>数据结构简单，对数据操作也简单</li><li>采用单线程，单线程也能处理高并发请求，想多核也可以启动多实例</li><li>使用多路I/O复用模型，非阻塞IO</li></ul><h2 id="多路I-O复用模型"><a href="#多路I-O复用模型" class="headerlink" title="多路I/O复用模型"></a>多路I/O复用模型</h2><h3 id="FD：File-Descriptor，文件描述符"><a href="#FD：File-Descriptor，文件描述符" class="headerlink" title="FD：File Descriptor，文件描述符"></a>FD：File Descriptor，文件描述符</h3><p>一个打开的文件通过唯一的描述符进行引用，该描述符是打开文件的元数据到文件本身的映射</p><h3 id="传统的阻塞I-O模型"><a href="#传统的阻塞I-O模型" class="headerlink" title="传统的阻塞I/O模型"></a>传统的阻塞I/O模型</h3><p><img src="/2019/04/22/备战面试-Redis篇/传统的阻塞IO模型.png" alt="传统的阻塞IO模型"></p><h3 id="Select系统调用"><a href="#Select系统调用" class="headerlink" title="Select系统调用"></a>Select系统调用</h3><p><img src="/2019/04/22/备战面试-Redis篇/Select系统调用.png" alt="Select系统调用"></p><h3 id="Redis采用的I-O多路复用函数"><a href="#Redis采用的I-O多路复用函数" class="headerlink" title="Redis采用的I/O多路复用函数"></a>Redis采用的I/O多路复用函数</h3><p><strong>epoll/kqueue/evport/select？</strong></p><ul><li>因地制宜</li><li>优先选择时间复杂度为O(1)的I/O多路复用函数作为底层实现</li><li>以时间复杂度为O(n)的select作为保底</li><li>基于react设计模式监听I/O事件</li></ul><h1 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h1><h2 id="供用户使用的数据类型"><a href="#供用户使用的数据类型" class="headerlink" title="供用户使用的数据类型"></a>供用户使用的数据类型</h2><ul><li>String：最基本的数据类型，二进制安全（最大能存储512M）</li><li>Hash：String元素组成的字典，适合用于存储对象</li><li>List：列表，按照String元素插入顺序排序</li><li>Set：String元素组成的无序集合，通过哈希表实现，不允许重复</li><li>Sorted Set：通过分数来为集合中的成员进行从小到大的排序</li><li>用于计数的HyperLogLog，用于支持存储地理位置信息的Geo</li></ul><h2 id="底层数据类型基础"><a href="#底层数据类型基础" class="headerlink" title="底层数据类型基础"></a>底层数据类型基础</h2><ul><li>简单动态字符串</li><li>链表</li><li>字典</li><li>跳跃表</li><li>整数集合</li><li>压缩列表</li><li>对象</li></ul><h1 id="从海量key里查询出某一固定前缀的key"><a href="#从海量key里查询出某一固定前缀的key" class="headerlink" title="从海量key里查询出某一固定前缀的key"></a>从海量key里查询出某一固定前缀的key</h1><h2 id="留意细节"><a href="#留意细节" class="headerlink" title="留意细节"></a>留意细节</h2><ul><li>摸清数据规模，即问清楚边界</li></ul><h2 id="批量生成redis测试数据"><a href="#批量生成redis测试数据" class="headerlink" title="批量生成redis测试数据"></a>批量生成redis测试数据</h2><p><strong>1.</strong>linux bash下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;=20000000;i++));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"set k<span class="variable">$i</span> v<span class="variable">$i</span>"</span> &gt;&gt; /tmp/redisTest.txt</span><br></pre></td></tr></table></figure><p>生成2千万条redis批量设置kv的语句(key=kn,value=vn)写入到/tmp目录下的redisTest.txt文件中</p><p><strong>2.</strong>用vim去掉行尾的^M符号，使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /tmp/redisTest.txt</span><br><span class="line">:<span class="built_in">set</span> fileformat=dos <span class="comment">#设置文件的格式，通过这句话去掉每行结尾的^M符号</span></span><br><span class="line">:wq <span class="comment">#保存退出</span></span><br></pre></td></tr></table></figure><p><strong>3.</strong>通过redis提供的管道–pipe形式，去跑redis，传入文件的指令批量灌数据，需要花费一段时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/redisTest.txt | 路径/redis-5.0.0/src/redis-cli -h 主机ip -p 端口号 --pipe</span><br></pre></td></tr></table></figure><h2 id="KEYS-pattern"><a href="#KEYS-pattern" class="headerlink" title="KEYS pattern"></a>KEYS pattern</h2><p><strong>查找所有符合给定模式pattern的key</strong></p><ul><li>KEYS指令一次性返回所有匹配的key</li><li>键的数量过大会使服务卡顿</li></ul><h2 id="SCAN-cursor-MATCH-pattern-COUNT-count"><a href="#SCAN-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="SCAN cursor [MATCH pattern] [COUNT count]"></a>SCAN cursor [MATCH pattern] [COUNT count]</h2><ul><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li><li>以0作为游标开始一次新的迭代，直到命令返回游标0完成一次遍历</li><li>不保证每次执行都返回某个给定数量的元素，支持模糊查询</li><li>一次返回的数量不可控，只能是大概率符合count参数</li></ul><h1 id="如何通过Redis实现分布式锁"><a href="#如何通过Redis实现分布式锁" class="headerlink" title="如何通过Redis实现分布式锁"></a>如何通过Redis实现分布式锁</h1><h2 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h2><ul><li>互斥性</li><li>安全性</li><li>死锁</li><li>容错</li></ul><h2 id="如何通过Redis实现"><a href="#如何通过Redis实现" class="headerlink" title="如何通过Redis实现"></a>如何通过Redis实现</h2><h3 id="SETNX-key-value"><a href="#SETNX-key-value" class="headerlink" title="SETNX key value"></a>SETNX key value</h3><p><strong>如果key不存在，则创建并赋值</strong></p><ul><li>时间复杂度：O(1)</li><li>返回值：设置成功，返回1；设置失败，返回0</li></ul><h3 id="如何解决SETNX长期有效的问题"><a href="#如何解决SETNX长期有效的问题" class="headerlink" title="如何解决SETNX长期有效的问题"></a>如何解决SETNX长期有效的问题</h3><h4 id="EXPIRE-key-seconds（错误的解法）"><a href="#EXPIRE-key-seconds（错误的解法）" class="headerlink" title="EXPIRE key seconds（错误的解法）"></a>EXPIRE key seconds（错误的解法）</h4><ul><li>设置key的生存时间，当key过期时(生存时间为0)，会被自动删除</li><li>缺点：原子性得不到满足</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line"><span class="keyword">long</span> status = redisService.setnx(key, <span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">    redisService.expire(key, expire);</span><br><span class="line">    <span class="comment">//执行独占资源逻辑</span></span><br><span class="line">    doOcuppiedWork()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SET-key-value-EX-seconds-PX-milliseconds-NX-XX"><a href="#SET-key-value-EX-seconds-PX-milliseconds-NX-XX" class="headerlink" title="SET key value [EX seconds] [PX milliseconds] [NX|XX]"></a>SET key value [EX seconds] [PX milliseconds] [NX|XX]</h4><ul><li>EX second：设置键的过期时间为second秒</li><li>PX millisecond：设置键的过期时间为millisecond毫秒</li><li>NX：只在键不存在时，才对键进行设置操作</li><li>XX：只在键已经存在时，才对键进行设置操作</li><li>SET操作成功完成时，返回OK，否则返回nil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line">String result = redisService.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"ok"</span>.equals(result)) &#123;</span><br><span class="line">    <span class="comment">//执行独占资源逻辑</span></span><br><span class="line">    doOcuppiedWork()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大量的key同时过期的注意事项"><a href="#大量的key同时过期的注意事项" class="headerlink" title="大量的key同时过期的注意事项"></a>大量的key同时过期的注意事项</h3><p>集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象</p><ul><li>解决方案：在设置key的过期时间的时候，给每个key加上随机值</li></ul><h1 id="如何使用Redis做异步队列"><a href="#如何使用Redis做异步队列" class="headerlink" title="如何使用Redis做异步队列"></a>如何使用Redis做异步队列</h1><p>使用List作为队列，RPUSH生产消息，LPOP消费消息</p><ul><li>缺点：没有等待队列里有值就直接消费</li><li>弥补：可以通过在应用层引入Sleep机制去调用LPOP重试</li></ul>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJpa-自动生成分布式高效主键ID</title>
      <link href="/2019/04/20/SpringDataJpa-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E6%95%88%E4%B8%BB%E9%94%AEID/"/>
      <url>/2019/04/20/SpringDataJpa-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E6%95%88%E4%B8%BB%E9%94%AEID/</url>
      
        <content type="html"><![CDATA[<p>是根据<a href="https://gitee.com/yu120/sequence" target="_blank" rel="noopener">分布式高效ID生产黑科技(sequence)</a>的算法实现的</p><p>首先将该项目中的两个关键文件复制进自己的项目</p><p><a href="https://gitee.com/yu120/sequence/blob/master/src/main/java/cn/ms/sequence/Sequence.java" target="_blank" rel="noopener">Sequence.java</a></p><p><a href="https://gitee.com/yu120/sequence/blob/master/src/main/java/cn/ms/sequence/SystemClock.java" target="_blank" rel="noopener">SystemClock.java</a></p><p>然后新建一个SnowflakeIdentifierGenerator类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdentifierGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span>, <span class="title">Configurable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sequence sequence;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Type type, Properties params, ServiceRegistry serviceRegistry)</span> <span class="keyword">throws</span> MappingException </span>&#123;</span><br><span class="line">        ConfigurationService configurationService = serviceRegistry.getService(ConfigurationService.class);</span><br><span class="line">        <span class="keyword">long</span> workerId = Long.parseLong(configurationService.getSetting(</span><br><span class="line">                <span class="string">"hibernate.custom.workerId"</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="string">"-1"</span></span><br><span class="line">        ));</span><br><span class="line">        <span class="keyword">long</span> datacenterId = Long.parseLong(configurationService.getSetting(</span><br><span class="line">                <span class="string">"hibernate.custom.datacenterId"</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                <span class="string">"-1"</span></span><br><span class="line">        ));</span><br><span class="line">        sequence = <span class="keyword">new</span> Sequence(workerId, datacenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">generate</span><span class="params">(SharedSessionContractImplementor session, Object object)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(sequence.nextId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里的workerId和datacenterId采用配置文件读取的方式进行读取，在application.yml中加入如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        custom:</span></span><br><span class="line"><span class="attr">          workerId:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          datacenterId:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>最后新建一个AbstractBaseEntity作为实体类的统一父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"snowflakeIdentifierGenerator"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(</span><br><span class="line">            name = <span class="string">"snowflakeIdentifierGenerator"</span>,</span><br><span class="line">            strategy = <span class="string">"SnowflakeIdentifierGenerator的完整路径(包名.类名)"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, length = <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成之后，所有的实体类只需要继承于该类，就可以自动生成ID了，在不同的微服务中，可以使用不同的workerId和datacenterId，从而实现分布式高效主键ID</p>]]></content>
      
      
      <categories>
          
          <category> SpringDataJpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringDataJpa </tag>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> sequence </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（三）：自定义用户认证</title>
      <link href="/2019/04/20/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
      <url>/2019/04/20/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义用户认证流程"><a href="#自定义用户认证流程" class="headerlink" title="自定义用户认证流程"></a>自定义用户认证流程</h1><p>首先回想一下我们最早学习java web的时候，是怎么做登录认证的。</p><blockquote><ol><li>首先制作登录页面(login.html)和登录认证endpoint(LoginController)</li><li>填写用户名、密码后Post提交表单给LoginController进行认证</li><li>java后台编写UserService、UserDao，根据用户名、密码搜索数据库判断用户信息。如果符合条件，则将用户信息存入session，并设置cookie存储jsessionid，失效时间为半小时，跳转到主页；如果不符合条件重新定位到login.html</li><li>用户登录成功后，带着cookie横行无阻，因为自定义过滤器UserFilter判断session中是否有用户信息，有就放行。</li><li>用户执行注销操作，java后台清除session和cookie，并跳转到登录页面。</li></ol></blockquote><p>Spring Security其实就是帮我们封装了一些类，简化了我们的代码。如果按照Spring Security的思路来做登录认证，应该是下面这样</p><blockquote><ol><li>用户编写WebSecurityConfigurerApdater的继承类，配置HttpSecurity，包括formLogin，antMatcher，hasRole等等。</li><li>项目启动自动装配FilterChain，访问不同uri对应不同的Filter Chain。</li><li>用户输入账号、密码点击登录，FilterChainProxy中的UsernamePasswordAuthenticationFilter获取request中的用户名、密码，验证身份信息</li><li>doFilter()过程中会执行ProviderManager.authenticate()，即遍历所有AuthenticationProvider执行authenticate()方法。</li><li>authenticate()方法中会调用userDetailService，用户自定义类继承UserDetailService，并重写其中的方法loadUserByUsername()，从数据库中获取用户信息进行比对</li><li>比对成功后将用户信息和角色信息整合成Authentication，并存入SecurityContext中，同时将SecurityContext也存入session中，跳转到主页面。</li><li>比对失败，SecurityContext中没有Authentication，FilterChain进行到最后一步FilterSecurityInterceptor，判断用户角色是否能访问request中的访问地址即资源。如果不行则报错跳转到指定页面；如果成功则进入request调用的资源。</li><li>注销操作由LogoutFilter执行，执行session.invalidate()和SecurityContextHolder.clearContext()。</li></ol></blockquote><h1 id="RBAC数据库设计"><a href="#RBAC数据库设计" class="headerlink" title="RBAC数据库设计"></a>RBAC数据库设计</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><img src="/2019/04/20/重学SpringSecurity5 第三节：自定义用户认证/RBAC数据库设计.png" alt="RBAC数据库设计"></p><h2 id="使用SpringDataJpa自动生成表"><a href="#使用SpringDataJpa自动生成表" class="headerlink" title="使用SpringDataJpa自动生成表"></a>使用SpringDataJpa自动生成表</h2><h3 id="AbstractBaseEntity"><a href="#AbstractBaseEntity" class="headerlink" title="AbstractBaseEntity"></a>AbstractBaseEntity</h3><p>详见<a href="/2019/04/20/SpringDataJpa-自动生成分布式高效主键ID">SpringDataJpa-自动生成分布式高效主键ID</a></p><h3 id="User表"><a href="#User表" class="headerlink" title="User表"></a>User表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"uaa_t_user"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"uaa_t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">AbstractBaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>, length = <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, length = <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"account_non_expired"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonExpired = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"account_non_locked"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonLocked = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"credentials_non_expired"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsNonExpired = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"enabled"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = &#123;</span><br><span class="line">        CascadeType.MERGE</span><br><span class="line">    &#125;, fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"uaa_r_user_role"</span>,</span><br><span class="line">        joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT)),</span><br><span class="line">        inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    getter...setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Role表"><a href="#Role表" class="headerlink" title="Role表"></a>Role表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"uaa_t_role"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"uaa_t_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">extends</span> <span class="title">AbstractBaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_name"</span>, length = <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"description"</span>, length = <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = &#123;</span><br><span class="line">        CascadeType.MERGE</span><br><span class="line">    &#125;, fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"uaa_r_role_authority"</span>,</span><br><span class="line">        joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT)),</span><br><span class="line">        inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"authority_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Authority&gt; authorities = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    getter...setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Authority表"><a href="#Authority表" class="headerlink" title="Authority表"></a>Authority表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"uaa_t_authority"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"uaa_t_authority"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Authority</span> <span class="keyword">extends</span> <span class="title">AbstractBaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"authority_name"</span>, length = <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String authorityName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"description"</span>, length = <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    getter...setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="comment">#url</span></span><br><span class="line"><span class="attr">    username:</span> <span class="comment">#username</span></span><br><span class="line"><span class="attr">    password:</span> <span class="comment">#password</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">create</span> <span class="comment">#第一次项目启动时使用create创建表格，后面可以使用update</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span> <span class="comment">#调整生成的表的引擎为InnoDB</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    generate-ddl:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        enable_lazy_load_no_trans:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        event:</span></span><br><span class="line"><span class="attr">          merge:</span></span><br><span class="line"><span class="attr">            entity_copy_observer:</span> <span class="string">allow</span></span><br><span class="line"><span class="attr">        custom:</span></span><br><span class="line"><span class="attr">          workerId:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          datacenterId:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="自定义用户认证"><a href="#自定义用户认证" class="headerlink" title="自定义用户认证"></a>自定义用户认证</h1><h2 id="实现UserDetails"><a href="#实现UserDetails" class="headerlink" title="实现UserDetails"></a>实现UserDetails</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"uaa_t_user"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"uaa_t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">AbstractBaseEntity</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>, length = <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, length = <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"account_non_expired"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonExpired = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"account_non_locked"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonLocked = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"credentials_non_expired"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsNonExpired = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"enabled"</span>, columnDefinition = <span class="string">"TINYINT(1) UNSIGNED"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = &#123;</span><br><span class="line">        CascadeType.MERGE</span><br><span class="line">    &#125;, fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"uaa_r_user_role"</span>,</span><br><span class="line">        joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT)),</span><br><span class="line">        inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        Set&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        roles.forEach(role -&gt; &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleName()));</span><br><span class="line">            role.getAuthorities().forEach(authority -&gt; &#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(authority.getAuthorityName()));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否未过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否未锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码是否未过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getter...setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现UserDetailsService"><a href="#实现UserDetailsService" class="headerlink" title="实现UserDetailsService"></a>实现UserDetailsService</h2><h3 id="UserRepository"><a href="#UserRepository" class="headerlink" title="UserRepository"></a>UserRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Optional&lt;User&gt; optional = userRepository.findUserByUsername(s);</span><br><span class="line">        <span class="keyword">if</span>(optional.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> optional.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置WebSecurityConfig"><a href="#配置WebSecurityConfig" class="headerlink" title="配置WebSecurityConfig"></a>配置WebSecurityConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//        http.httpBasic()</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此为止，我们就实现了自定义用户的认证，可以尝试启动项目，并新建测试用户进行登录了。</p><hr><h1 id="关于UserDetails"><a href="#关于UserDetails" class="headerlink" title="关于UserDetails"></a>关于UserDetails</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides core user information.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Implementations are not used directly by Spring Security for security purposes. They</span></span><br><span class="line"><span class="comment"> * simply store user information which is later encapsulated into &#123;<span class="doctag">@link</span> Authentication&#125;</span></span><br><span class="line"><span class="comment"> * objects. This allows non-security related user information (such as email addresses,</span></span><br><span class="line"><span class="comment"> * telephone numbers etc) to be stored in a convenient location.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Concrete implementations must take particular care to ensure the non-null contract</span></span><br><span class="line"><span class="comment"> * detailed for each method is enforced. See</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.security.core.userdetails.User&#125; for a reference</span></span><br><span class="line"><span class="comment"> * implementation (which you might like to extend or use in your code).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> UserDetailsService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> UserCache</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Alex</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Methods</span></span><br><span class="line"><span class="comment">// ========================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the authorities granted to the user. Cannot return &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the authorities, sorted by natural key (never &lt;code&gt;null&lt;/code&gt;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the password used to authenticate the user.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the username used to authenticate the user. Cannot return &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the username (never &lt;code&gt;null&lt;/code&gt;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the user's account has expired. An expired account cannot be</span></span><br><span class="line"><span class="comment"> * authenticated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the user's account is valid (ie non-expired),</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;false&lt;/code&gt; if no longer valid (ie expired)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the user is locked or unlocked. A locked user cannot be</span></span><br><span class="line"><span class="comment"> * authenticated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the user is not locked, &lt;code&gt;false&lt;/code&gt; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the user's credentials (password) has expired. Expired</span></span><br><span class="line"><span class="comment"> * credentials prevent authentication.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the user's credentials are valid (ie non-expired),</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;false&lt;/code&gt; if no longer valid (ie expired)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the user is enabled or disabled. A disabled user cannot be</span></span><br><span class="line"><span class="comment"> * authenticated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the user is enabled, &lt;code&gt;false&lt;/code&gt; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>在SpringSecurity中，用户实体都需要去实现UserDetails，才能为SpringSecurity所用，其中有几个重要的方法：</p><ul><li><p><strong>Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</strong> 返回用户的所有权限，在我们的RBAC模型中，这里需要把角色也放入这个集合中，角色的命名一定要以ROLE_为前缀，SpringSecurity才能认定它是一个角色</p></li><li><p><strong>String getUsername(); </strong></p><p><strong>String getPassword();</strong> 没什么好说的，分别返回用户名和密码</p></li><li><p><strong>boolean isAccountNonExpired();</strong> 返回该账户是否<strong>没有</strong>过期（返回true为未过期，返回false为已过期）</p></li><li><strong>boolean isAccountNonLocked();</strong> 返回该账户是否<strong>没有</strong>被锁定（返回true为未锁定，返回false为已锁定）</li><li><strong>boolean isCredentialsNonExpired();</strong> 返回该账户的凭证(密码)是否<strong>没有</strong>过期（返回true为未过期，返回false为已过期）</li><li><strong>boolean isEnabled();</strong> 返回该账户是否启用（返回true为启用，返回false为禁用）</li></ul><p>总的来说，下面的四个方法，返回true均为可以登录，返回false均为无法登录，如果业务系统中并不需要这么复杂，可以直接返回true</p><h2 id="如果我们不用认证框架，我们是怎么手动实现登录认证的"><a href="#如果我们不用认证框架，我们是怎么手动实现登录认证的" class="headerlink" title="如果我们不用认证框架，我们是怎么手动实现登录认证的"></a>如果我们不用认证框架，我们是怎么手动实现登录认证的</h2><p>基本上就是根据前端提交上来的用户名从数据库中查找这个账号的信息，然后比对密码。再进一步，可能还会添加一个字段来判断，当前用户是否已被锁定。这个接口就是这么用的。即把这些信息取出来，然后包装成一个对象交由框架去认证。</p><h2 id="为什么还要带上权限"><a href="#为什么还要带上权限" class="headerlink" title="为什么还要带上权限"></a>为什么还要带上权限</h2><p>因为登录成功后也不是什么都能访问的，还要根据你所拥有的权限进行判断。有权限你才能访问特定的对象。SpringSecurity框架是这样设计的，即认证成功后，就把用户信息和拥有的权限都存储在SecurityContext中，当访问受保护资源（某个对象/方法）的时候，就把权限拿出来比对，看看是否满足。</p><hr><h1 id="关于UserDetailsService"><a href="#关于UserDetailsService" class="headerlink" title="关于UserDetailsService"></a>关于UserDetailsService</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Core interface which loads user-specific data.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It is used throughout the framework as a user DAO and is the strategy used by the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider</span></span><br><span class="line"><span class="comment"> * DaoAuthenticationProvider&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The interface requires only one read-only method, which simplifies support for new</span></span><br><span class="line"><span class="comment"> * data-access strategies.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> UserDetails</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Alex</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Methods</span></span><br><span class="line"><span class="comment">// ========================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Locates the user based on the username. In the actual implementation, the search</span></span><br><span class="line"><span class="comment"> * may possibly be case sensitive, or case insensitive depending on how the</span></span><br><span class="line"><span class="comment"> * implementation instance is configured. In this case, the &lt;code&gt;UserDetails&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * object that comes back may have a username that is of a different case than what</span></span><br><span class="line"><span class="comment"> * was actually requested..</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username the username identifying the user whose data is required.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a fully populated user record (never &lt;code&gt;null&lt;/code&gt;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UsernameNotFoundException if the user could not be found or the user has no</span></span><br><span class="line"><span class="comment"> * GrantedAuthority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><p>在SpringSecurity中，加载用户信息需要实现UserDetailsService，UserDetailsService中只有一个只读方法，就是传入用户名，返回一个实现了UserDetails的类，如果当用户不存在时，抛出一个UsernameNotFoundException异常。</p><h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><p>UserDetailService 负责认证用户？</p><p>实际上：UserDetailService只单纯地负责存取用户信息，除了给框架内的其他组件提供数据外没有其他功能。而认证过程是由AuthenticationManager来完成的。（大多数情况下，可以通过实现AuthenticationProvider接口来自定义认证过程）</p><hr><h1 id="关于PasswordEncoder"><a href="#关于PasswordEncoder" class="headerlink" title="关于PasswordEncoder"></a>关于PasswordEncoder</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Service interface for encoding passwords.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The preferred implementation is &#123;<span class="doctag">@code</span> BCryptPasswordEncoder&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Keith Donald</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or</span></span><br><span class="line"><span class="comment"> * greater hash combined with an 8-byte or greater randomly generated salt.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Verify the encoded password obtained from storage matches the submitted raw</span></span><br><span class="line"><span class="comment"> * password after it too is encoded. Returns true if the passwords match, false if</span></span><br><span class="line"><span class="comment"> * they do not. The stored password itself is never decoded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rawPassword the raw password to encode and match</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encodedPassword the encoded password from storage to compare with</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the raw password, after encoding, matches the encoded password from</span></span><br><span class="line"><span class="comment"> * storage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if the encoded password should be encoded again for better security,</span></span><br><span class="line"><span class="comment"> * else false. The default implementation always returns false.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encodedPassword the encoded password to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the encoded password should be encoded again for better security,</span></span><br><span class="line"><span class="comment"> * else false.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h2><p>大多时候，我们的密码信息并不会直接明文存放在数据库中，需要进行一定的加密来存放；同时，登录时，也会使用到同样的加密算法来对密码进行对比。</p><p>在SpringSecurity中，我们只需要实现PasswordEncoder即可，它有两个重要的方法：</p><ul><li><strong>String encode(CharSequence rawPassword);</strong> 用来对明文字符串进行编码，一般是框架使用者来调用的，例如注册时，需要调用该方法对密码字段进行加密后再存入数据库</li><li><strong>boolean matches(CharSequence rawPassword, String encodedPassword);</strong> 用来对比密码是否匹配，一般是框架自身去调用的，登录时会调用该方法来验证密码</li></ul><p>除此之外，还有一个默认返回false的方法：<strong>default boolean upgradeEncoding(String encodedPassword);</strong></p><p>根据该方法的注释，该方法如果返回true，应再次对编码的密码进行编码以提高安全性，暂时还没有用过，大概猜测为进行二次验证？待后续更新</p><p>与此同时，SpringSecurity还为我们推荐了一个加密算法：<strong>BCryptPasswordEncoder</strong></p><p>关于该加密算法具体如何实现，可以前去阅读<a href="https://cloud.tencent.com/developer/article/1131678" target="_blank" rel="noopener">很方便的密码加密算法BCrypt</a></p>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> RBAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-反射篇</title>
      <link href="/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%8F%8D%E5%B0%84%E7%AF%87/"/>
      <url>/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%8F%8D%E5%B0%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h3 id="获取一个类对应的Class类的方法"><a href="#获取一个类对应的Class类的方法" class="headerlink" title="获取一个类对应的Class类的方法"></a>获取一个类对应的Class类的方法</h3><ul><li><strong>Object.getClass()</strong></li><li><strong>使用类的class成员属性</strong></li><li><strong>Class.forName(“类的完整路径”)</strong></li></ul><hr><h3 id="返回Class类对应的实体类的相关的Class类的方法"><a href="#返回Class类对应的实体类的相关的Class类的方法" class="headerlink" title="返回Class类对应的实体类的相关的Class类的方法"></a>返回Class类对应的实体类的相关的Class类的方法</h3><h4 id="返回当前Class类对应的实体类的父类的Class类"><a href="#返回当前Class类对应的实体类的父类的Class类" class="headerlink" title="返回当前Class类对应的实体类的父类的Class类"></a>返回当前Class类对应的实体类的父类的Class类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;? <span class="keyword">super</span> T&gt; getSuperclass()</span><br></pre></td></tr></table></figure><h4 id="返回类定义的公共的内部类-以及从父类、父接口那里继承来的内部类"><a href="#返回类定义的公共的内部类-以及从父类、父接口那里继承来的内部类" class="headerlink" title="返回类定义的公共的内部类,以及从父类、父接口那里继承来的内部类"></a>返回类定义的公共的内部类,以及从父类、父接口那里继承来的内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getClasses()</span><br></pre></td></tr></table></figure><h4 id="返回类中定义的公共、私有、保护的内部类"><a href="#返回类中定义的公共、私有、保护的内部类" class="headerlink" title="返回类中定义的公共、私有、保护的内部类"></a>返回类中定义的公共、私有、保护的内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getDeclaredClasses()</span><br></pre></td></tr></table></figure><h4 id="获取Class对应类-或者接口-的修饰符"><a href="#获取Class对应类-或者接口-的修饰符" class="headerlink" title="获取Class对应类(或者接口)的修饰符"></a>获取Class对应类(或者接口)的修饰符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><hr><h4 id="获取Class对应的类或者接口的成员Member-成员有：属性，方法-构造方法"><a href="#获取Class对应的类或者接口的成员Member-成员有：属性，方法-构造方法" class="headerlink" title="获取Class对应的类或者接口的成员Member(成员有：属性，方法,构造方法)"></a><strong>获取Class对应的类或者接口的成员Member(成员有：属性，方法,构造方法)</strong></h4><p><strong>java.lang.reflect.Member</strong> 是一个接口，代表 Class 的成员，每个成员都有类型，分为是否从父类继承，还有是否可以直接访问。</p><p><strong>Member</strong> 有三个实现类：</p><ul><li><p><strong>java.lang.reflect.Constructor</strong>：表示该 Class 的构造函数</p></li><li><p><strong>java.lang.reflect.Field</strong>：表示该 Class 的成员变量</p></li><li><p><strong>java.lang.reflect.Method</strong>：表示该 Class 的成员方法</p></li></ul><h5 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h5><ul><li><p>返回构造器数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getDeclaredConstructors();<span class="comment">//返回所有的构造方法的Constructor对象的数组的Constructor对象的数组</span></span><br><span class="line">Constructor&lt;?&gt;[] getConstructors();        <span class="comment">//返回所有共有的构造方法的Constructor对象的数组</span></span><br></pre></td></tr></table></figure></li><li><p>返回指定的一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span>; <span class="comment">//返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 </span></span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span>; <span class="comment">//返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法。</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h5><ul><li><p>获取方法对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method[] getMethods();<span class="comment">//只能获取public修饰的方法数组</span></span><br><span class="line">Method[] getDeclaredMethods();<span class="comment">//可以获取除继承外的所有方法</span></span><br></pre></td></tr></table></figure></li><li><p>获取单个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span>;<span class="comment">//只能获取到public修饰的方法 </span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span>;<span class="comment">//能获取除继承外的方法所有方法(公有，保护，默认，私有)</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h4 id="返回字符串-String-的方法"><a href="#返回字符串-String-的方法" class="headerlink" title="返回字符串(String)的方法"></a>返回字符串(String)的方法</h4><h5 id="获取当前Class表示的类的完整名字-包名-类名"><a href="#获取当前Class表示的类的完整名字-包名-类名" class="headerlink" title="获取当前Class表示的类的完整名字(包名.类名)"></a>获取当前Class表示的类的完整名字(包名.类名)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="获取当前Class表示的实体的简称-类名"><a href="#获取当前Class表示的实体的简称-类名" class="headerlink" title="获取当前Class表示的实体的简称(类名)"></a>获取当前Class表示的实体的简称(类名)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSimpleName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="把对象转换成String"><a href="#把对象转换成String" class="headerlink" title="把对象转换成String"></a>把对象转换成String</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="返回底层类的规范化名称"><a href="#返回底层类的规范化名称" class="headerlink" title="返回底层类的规范化名称"></a>返回底层类的规范化名称</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getCanonicalName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><hr><h4 id="返回boolean的方法"><a href="#返回boolean的方法" class="headerlink" title="返回boolean的方法"></a>返回boolean的方法</h4><h5 id="判断当前类是什么类"><a href="#判断当前类是什么类" class="headerlink" title="判断当前类是什么类"></a>判断当前类是什么类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLocalClass</span><span class="params">()</span>     </span>;<span class="comment">//判断是不是局部类，也就是方法里面的类 </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isMemberClass</span><span class="params">()</span>    </span>;<span class="comment">//判断是不是成员内部类，也就是一个类里面定义的类</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnonymousClass</span><span class="params">()</span> </span>;<span class="comment">//判断当前类是不是匿名类，匿名类一般用于实例化接口</span></span><br></pre></td></tr></table></figure><h5 id="其他返回boolean的方法"><a href="#其他返回boolean的方法" class="headerlink" title="其他返回boolean的方法"></a>其他返回boolean的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotation</span><span class="params">()</span> </span>;<span class="comment">//判断当前Class对象是否是注释类型</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span><span class="comment">//如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span><span class="comment">//判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEnum</span><span class="params">()</span><span class="comment">//当且仅当该类声明为源代码中的枚举时返回 true。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInstance</span><span class="params">(Object obj)</span><span class="comment">//判定指定的 Object 是否与此 Class 所表示的对象赋值兼容。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInterface</span><span class="params">()</span><span class="comment">//判定指定的 Class 对象是否表示一个接口类型。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrimitive</span><span class="params">()</span><span class="comment">//判定指定的 Class 对象是否表示一个基本类型。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSynthetic</span><span class="params">()</span><span class="comment">//如果此类是复合类，则返回 true，否则 false。</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 面试 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-JVM篇</title>
      <link href="/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/"/>
      <url>/2019/04/17/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈你对Java的理解"><a href="#谈谈你对Java的理解" class="headerlink" title="谈谈你对Java的理解"></a>谈谈你对Java的理解</h1><ul><li>平台无关性</li><li>GC</li><li>语言特性(泛型、反射、Lamba表达式)</li><li>面向对象</li><li>类库</li><li>异常处理</li></ul><hr><h1 id="Compile-Once，Run-Anywhere如何实现"><a href="#Compile-Once，Run-Anywhere如何实现" class="headerlink" title="Compile Once，Run Anywhere如何实现"></a>Compile Once，Run Anywhere如何实现</h1><p> <img src="/2019/04/17/备战面试-JVM篇/Java编译运行流程.png" alt="Java编译运行流程"></p><p>Java源码首先被编译成字节码，再由不同平台的JVM进行解析，Java语言在不同平台上运行时不需要进行重新编译，Java虚拟机在执行字节码的时候，把字节码转换成具体平台上的机器指令。</p><hr><h1 id="为什么JVM不直接将源码解析成机器码去执行"><a href="#为什么JVM不直接将源码解析成机器码去执行" class="headerlink" title="为什么JVM不直接将源码解析成机器码去执行"></a>为什么JVM不直接将源码解析成机器码去执行</h1><ul><li>准备工作：每次执行都需要各种检查</li><li>兼容性：也可以将别的语言解析成字节码</li></ul><hr><h1 id="JVM如何加载-class文件"><a href="#JVM如何加载-class文件" class="headerlink" title="JVM如何加载.class文件"></a>JVM如何加载.class文件</h1><h2 id="Java虚拟机JVM"><a href="#Java虚拟机JVM" class="headerlink" title="Java虚拟机JVM"></a>Java虚拟机JVM</h2><p><img src="/2019/04/17/备战面试-JVM篇/JAVA虚拟机.png" alt="JAVA虚拟机"></p><ul><li><strong>Class Loader</strong>：依据特定格式，加载class文件到内存</li><li><strong>Execution Engine</strong>：对命令进行解析</li><li><strong>Native Interface</strong>：融合不同开发语言的原生库为Java所用</li><li><strong>Runtime Data Area</strong>：JVM内存空间结构模型</li></ul><h2 id="类从编译到执行的过程"><a href="#类从编译到执行的过程" class="headerlink" title="类从编译到执行的过程"></a>类从编译到执行的过程</h2><ul><li>编译器将xxx.java源文件编译为xxx.class字节码文件</li><li>ClassLoader将字节码转换为JVM中的Class&#60;xxx&#62;对象</li><li>JVM利用Class&#60;xxx&#62;对象实例化为Robot对象</li></ul><hr><h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><p>ClassLoader在Java中有着非常重要的作用，它主要工作在Class装载的加载阶段，其主要作用是从系统外部获得Class二进制数据流，它是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过将Class文件里的二进制数据流装载进系统，然后交给Java虚拟机进行连接、初始化等操作。</p><hr><h2 id="ClassLoader的种类"><a href="#ClassLoader的种类" class="headerlink" title="ClassLoader的种类"></a>ClassLoader的种类</h2><ul><li><strong>BootStrapClassLoader</strong>：C++编写，加载核心库java.*</li><li><strong>ExtClassLoader</strong>：Java编写，加载扩展库javax.*</li><li><strong>AppClassLoader</strong>：Java编写，加载程序所在目录</li><li><strong>自定义ClassLoader</strong>：Java编写，定制化加载</li></ul><hr><h3 id="自定义ClassLoader的实现"><a href="#自定义ClassLoader的实现" class="headerlink" title="自定义ClassLoader的实现"></a>自定义ClassLoader的实现</h3><h4 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len) <span class="keyword">throws</span> ClassFormatError &#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(name, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编写自己的ClassLoader"><a href="#编写自己的ClassLoader" class="headerlink" title="编写自己的ClassLoader"></a>编写自己的ClassLoader</h4><p>首先在桌面上新建一个java文件，名为Robot.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a robot"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javac命令将其编译为.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.lihongjie.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String classLoaderPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String classLoaderPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classLoaderPath = classLoaderPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path path = Paths.get(<span class="keyword">this</span>.classLoaderPath + name + <span class="string">".class"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = Files.readAllBytes(path);</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader(<span class="string">"C:\\Users\\a1320\\Desktop\\"</span>);</span><br><span class="line">        Class&lt;?&gt; robot = myClassLoader.findClass(<span class="string">"Robot"</span>);</span><br><span class="line">        robot.newInstance();</span><br><span class="line">        System.out.println(robot.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法可以看到，桌面上的Robot.class已经被加载进来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[运行结果]</span><br><span class="line">I am a robot</span><br><span class="line">com.github.lihongjie.reflex.MyClassLoader@<span class="number">4554617</span>c</span><br></pre></td></tr></table></figure><hr><h2 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h2><ul><li>隐式加载：<strong>new</strong></li><li>显示加载：<strong>loadClass</strong>，<strong>forName</strong>等</li></ul><hr><h3 id="loadClass和forName的区别"><a href="#loadClass和forName的区别" class="headerlink" title="loadClass和forName的区别"></a>loadClass和forName的区别</h3><h4 id="类的装载过程"><a href="#类的装载过程" class="headerlink" title="类的装载过程"></a>类的装载过程</h4><p><img src="/2019/04/17/备战面试-JVM篇/类的装载过程.png" alt="类的装载过程"></p><h4 id="loadClass和forName的区别-1"><a href="#loadClass和forName的区别-1" class="headerlink" title="loadClass和forName的区别"></a>loadClass和forName的区别</h4><ul><li><strong>Class.forName得到的Class是已经初始化完成的</strong></li><li><strong>Classloader.loadClass得到的Class是还没有链接的</strong></li></ul><hr><h1 id="JAVA内存模型"><a href="#JAVA内存模型" class="headerlink" title="JAVA内存模型"></a>JAVA内存模型</h1><h2 id="内存简介"><a href="#内存简介" class="headerlink" title="内存简介"></a>内存简介</h2><p><img src="/2019/04/17/备战面试-JVM篇/内存简介.png" alt="内存简介"></p><ul><li>32位处理器：2^32的可寻址范围</li><li>64位处理器：2^64的可寻址范围</li></ul><hr><h2 id="地址空间的划分"><a href="#地址空间的划分" class="headerlink" title="地址空间的划分"></a>地址空间的划分</h2><ul><li>内核空间</li><li>用户空间</li></ul><hr><h2 id="JVM内存模型——JDK8"><a href="#JVM内存模型——JDK8" class="headerlink" title="JVM内存模型——JDK8"></a>JVM内存模型——JDK8</h2><p><img src="/2019/04/17/备战面试-JVM篇/JVM内存模型-线程.png" alt="JVM内存模型"></p><ul><li>线程私有：程序计数器、虚拟机栈、本地方法栈</li><li>线程共享：MetaSpace、Java堆</li></ul><hr><h3 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器(Program Counter Register)"></a>程序计数器(Program Counter Register)</h3><ul><li>当前线程所执行的字节码行号指示器(<strong>逻辑</strong>)</li><li>改变计数器的值来选取下一条需要执行的字节码指令</li><li>和线程是一对一的关系，即”<strong>线程私有</strong>“</li><li><strong>只对Java方法计数</strong>，如果是Native方法则计数器值为Undefined</li><li>不会发生内存泄漏</li></ul><hr><h3 id="Java虚拟机栈-Stack"><a href="#Java虚拟机栈-Stack" class="headerlink" title="Java虚拟机栈(Stack)"></a>Java虚拟机栈(Stack)</h3><p><img src="/2019/04/17/备战面试-JVM篇/JAVA虚拟机栈.png" alt="JAVA虚拟机栈"></p><ul><li>Java方法执行的内存模型</li><li>包含多个栈帧</li></ul><h4 id="局部变量表和操作数栈"><a href="#局部变量表和操作数栈" class="headerlink" title="局部变量表和操作数栈"></a>局部变量表和操作数栈</h4><ul><li>局部变量表：包含方法执行过程中的所有变量</li><li>操作数栈：入栈、出栈、复制、交换、产生消费变量</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.lihongjie.jvm.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCodeSample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        c = a + b;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用javac命令对java文件进行编译</p><p>使用javap -verbose命令对class文件反编译，并且使用口语化的方式表述出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Classfile /C:/Users/a1320/IdeaProjects/java-study/src/com/github/lihongjie/jvm/model/ByteCodeSample.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">4</span>-<span class="number">17</span>; size <span class="number">301</span> bytes</span><br><span class="line">  MD5 checksum fa9fdfa92cae57de1bbdba6ff415385c</span><br><span class="line">  Compiled from <span class="string">"ByteCodeSample.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">github</span>.<span class="title">lihongjie</span>.<span class="title">jvm</span>.<span class="title">model</span>.<span class="title">ByteCodeSample</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER<span class="comment">//表示该类是共有的，并且继承自Object</span></span><br><span class="line">Constant pool: <span class="comment">//常量池信息</span></span><br><span class="line">   #1 = Methodref          #3.#12         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Class              #13            // com/github/lihongjie/jvm/model/ByteCodeSample</span><br><span class="line">   #3 = Class              #14            // java/lang/Object</span><br><span class="line">   #4 = Utf8               &lt;init&gt;</span><br><span class="line">   #5 = Utf8               ()V</span><br><span class="line">   #6 = Utf8               Code</span><br><span class="line">   #7 = Utf8               LineNumberTable</span><br><span class="line">   #8 = Utf8               add</span><br><span class="line">   #9 = Utf8               (II)I</span><br><span class="line">  #10 = Utf8               SourceFile</span><br><span class="line">  #11 = Utf8               ByteCodeSample.java</span><br><span class="line">  #12 = NameAndType        #4:#5          // "&lt;init&gt;":()V</span><br><span class="line">  #13 = Utf8               com/github/lihongjie/jvm/model/ByteCodeSample</span><br><span class="line">  #14 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.github.lihongjie.jvm.model.ByteCodeSample();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    descriptor: (II)I<span class="comment">//对于方法的描述，表示接收两个int类型的参数，返回值也是int</span></span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC<span class="comment">//修饰符 public static</span></span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">2</span><span class="comment">//操作数栈=2 本地变量容量=3 参数大小=2</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_2</span><br><span class="line">         <span class="number">2</span>: iload_0</span><br><span class="line">         <span class="number">3</span>: iload_1</span><br><span class="line">         <span class="number">4</span>: iadd</span><br><span class="line">         <span class="number">5</span>: istore_2</span><br><span class="line">         <span class="number">6</span>: iload_2</span><br><span class="line">         <span class="number">7</span>: ireturn</span><br><span class="line">      LineNumberTable:<span class="comment">//行号</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span><span class="comment">//代码第5行对应字节码第0行</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"ByteCodeSample.java"</span></span><br></pre></td></tr></table></figure><p><strong>执行add(1,2)</strong></p><p><img src="/2019/04/17/备战面试-JVM篇/执行add.png" alt="执行add"></p><h4 id="递归为什么会引发java-lang-StackOverflowError异常"><a href="#递归为什么会引发java-lang-StackOverflowError异常" class="headerlink" title="递归为什么会引发java.lang.StackOverflowError异常"></a>递归为什么会引发java.lang.StackOverflowError异常</h4><ul><li>递归过深，栈帧数超出虚拟栈深度</li></ul><hr><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li>与虚拟机栈相似，主要作用于标注了native的方法</li></ul><hr><h3 id="JVM三大性能调优参数-Xms-Xmx-Xss的含义"><a href="#JVM三大性能调优参数-Xms-Xmx-Xss的含义" class="headerlink" title="JVM三大性能调优参数-Xms -Xmx -Xss的含义"></a>JVM三大性能调优参数-Xms -Xmx -Xss的含义</h3><ul><li>-Xss：规定了每个线程虚拟机栈(堆栈)的大小</li><li>-Xms：堆的初始值</li><li>-Xmx：堆能达到的最大值</li></ul><hr><h3 id="Java内存模型中堆和栈的区别——内存分配策略"><a href="#Java内存模型中堆和栈的区别——内存分配策略" class="headerlink" title="Java内存模型中堆和栈的区别——内存分配策略"></a>Java内存模型中堆和栈的区别——内存分配策略</h3><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定</li><li>堆式存储：编译时或运行时模块入口都无法确定，动态分配</li></ul><hr><h3 id="Java内存模型中堆和栈的区别"><a href="#Java内存模型中堆和栈的区别" class="headerlink" title="Java内存模型中堆和栈的区别"></a>Java内存模型中堆和栈的区别</h3><ul><li>联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址</li></ul><p><img src="/2019/04/17/备战面试-JVM篇/堆和栈的区别.png" alt="堆和栈的区别"></p><ul><li>管理方式：栈自动释放，堆需要GC</li><li>空间大小：栈比堆小</li><li>碎片相关：栈产生的碎片远小于堆</li><li>分配方式：栈支持静态和动态分配，而堆仅支持动态分配</li><li>效率：栈的效率比堆高</li></ul><h1 id="不同JDK版本之间的intern-方法的区别——JDK6-VS-JDK6"><a href="#不同JDK版本之间的intern-方法的区别——JDK6-VS-JDK6" class="headerlink" title="不同JDK版本之间的intern()方法的区别——JDK6 VS JDK6+"></a>不同JDK版本之间的intern()方法的区别——JDK6 VS JDK6+</h1><p>JDK6：当调用intern()方法时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。<strong>否则，将此字符串对象添加到字符串常量池中，并且返回该字符串对象的引用。</strong></p><p>JDK6+：当调用intern()方法时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。<strong>否则，如果该字符串对应已经存在于Java堆中，则将堆中对此对象的引用添加到字符串常量池中，并且返回该引用；如果堆中不存在，则在池中创建该字符串并返回其引用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 面试 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（二）：基本原理</title>
      <link href="/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>上一节我们搭建了SpringSecurity的基础环境，并且使用SpringSecurity的默认认证方式完成了认证，这一节主要针对SpringSecuirty的默认配置来说明一下SpringSecurity的原理</p><h1 id="SpringSecurity基本原理"><a href="#SpringSecurity基本原理" class="headerlink" title="SpringSecurity基本原理"></a>SpringSecurity基本原理</h1><p>在上一节完成的默认认证中，我们访问<a href="http://localhost:8080/hello，浏览器自动跳转至http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/hello，浏览器自动跳转至http://localhost:8080/login</a></p><p>实际上，在SpringSecurity中，最核心的部分就是SpringSecurity过滤器链，实际上就是一组过滤器</p><p>我们的所有请求和响应都会通过SpringSecurity的过滤器，这些过滤器，在项目启动时，Springboot会自动将他们加入</p><p>接下来我们依次看一下几个比较核心的过滤器</p><p>在刚才的例子中，我们先后使用了http.formLogin()与http.httpBasic()两种认证方式，事实上，它们都各自对应如下的过滤器</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/1.png" alt></p><p><strong>UsernamePasswordAuthenticationFilter</strong></p><p>该过滤器仅在开启了http.formLogin()时生效，检查请求中是否有用户名和密码，如果有，则尝试使用该用户名和密码进行认证；如果没有，则交给下一过滤器处理</p><p><strong>BasicAuthenticationFilter</strong></p><p>该过滤器检查请求头中是否含有Basic认证信息，如果有，会尝试使用Base64进行解码后的用户名密码进行认证；如果没有，则交给下一过滤器处理</p><p>任何过滤器如果完成了认证，会标记该请求已经认证成功了，后续过滤器则不再检查</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/2.png" alt></p><p>接下来会来到最终的一个过滤器FilterSecurityInterceptor</p><p><strong>FilterSecurityInterceptor</strong></p><p>该过滤器为SpringSecurity过滤器链的最后一环，它将决定请求是否能够访问服务器资源，其依据代码中的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段配置的含义为：任何请求都需要进行身份认证后才可以访问</p><p>然后根据该请求是否通过前面的过滤器的认证标记决定是否允许访问</p><p>如果未通过身份认证，该过滤器会抛出具体未通过认证的原因的异常</p><p><img src="/2019/04/15/重学SpringSecurity5 第二节：基本原理/3.png" alt></p><p>如果抛出异常，在其之前的一个过滤器ExceptionTransiationFilter将会生效</p><p><strong>ExceptionTranslationFilter</strong></p><p>该过滤器负责拦截FilterSecurityInterceptor抛出的异常，根据异常来引导用户进行登录或者进行别的操作</p><p><strong>在这一整条过滤器链上，绿色的部分是可以通过配置控制其是否生效的，除此之外其他的过滤器是无法控制其生效以及顺序</strong></p>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学SpringSecurity5（一）：基础环境</title>
      <link href="/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/04/15/%E9%87%8D%E5%AD%A6SpringSecurity5%20%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次使用SpringSecurity还是很久前，只实现了很简单的登录功能，现在SpringCloud大肆横行，Spring全家桶变得尤为重要</p><p>打算从头学习一下SpringSecurity，顺便梳理一下相关的知识</p><hr><h1 id="开发环境以及IDE："><a href="#开发环境以及IDE：" class="headerlink" title="开发环境以及IDE："></a>开发环境以及IDE：</h1><ul><li><p>Windows10_1809</p></li><li><p>Oracle Java 1.8.0_171</p></li><li><p>Apache Maven 3.5.3</p></li><li><p>MYSQL 8.0</p></li><li><p>IntelliJ IDEA</p></li></ul><hr><h1 id="Maven依赖："><a href="#Maven依赖：" class="headerlink" title="Maven依赖："></a>Maven依赖：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h1><h2 id="1-SpringsecurityDemoApplication"><a href="#1-SpringsecurityDemoApplication" class="headerlink" title="1.SpringsecurityDemoApplication"></a>1.SpringsecurityDemoApplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringsecurityDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringsecurityDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-WebSecurityConfig"><a href="#2-WebSecurityConfig" class="headerlink" title="2.WebSecurityConfig"></a>2.WebSecurityConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//        http.httpBasic()</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动项目后，可以在日志中看到这一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using generated security password: ca5b58f9-560b-4a7b-900d-dd85f2fb0353</span><br></pre></td></tr></table></figure></p><p>这就是SpringSecurity为我们默认生成的密码</p><p>这时在浏览器中访问：<a href="http://localhost:8080/hello，会自动跳转到http://localhost:8080/login进行登录" target="_blank" rel="noopener">http://localhost:8080/hello，会自动跳转到http://localhost:8080/login进行登录</a></p><p>用户名填入user，密码填入上面日志中的密码，即可跳转回<a href="http://localhost:8080/hello，在页面上显示hello" target="_blank" rel="noopener">http://localhost:8080/hello，在页面上显示hello</a></p><p>至此，基础环境已经搭建完毕，SpringSecurity为我们默认指定了formLogin的认证方式，如果需要使用httpBasic认证方式，只需要在WebSecurityConfig中改为http.httpBasic()即可</p>]]></content>
      
      
      <categories>
          
          <category> 重学SpringSecurity5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-网络篇</title>
      <link href="/2019/04/15/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
      <url>/2019/04/15/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="OSI开放式互联参考模型"><a href="#OSI开放式互联参考模型" class="headerlink" title="OSI开放式互联参考模型"></a>OSI开放式互联参考模型</h1><p><img src="/2019/04/15/备战面试-网络篇/OSI参考模型.gif" alt="OSI参考模型"></p><hr><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><p><img src="/2019/04/15/备战面试-网络篇/TCPIP协议层次图.png" alt="TCP/IP协议层次图"></p><hr><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="传输控制协议TCP简介"><a href="#传输控制协议TCP简介" class="headerlink" title="传输控制协议TCP简介"></a>传输控制协议TCP简介</h2><ul><li>面向连接的、可靠的、基于字节流的传输层通信协议</li><li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li><li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li><li>使用校验和来校验数据在传输过程中是否有误</li></ul><hr><h2 id="TCP报文头"><a href="#TCP报文头" class="headerlink" title="TCP报文头"></a>TCP报文头</h2><p><img src="/2019/04/15/备战面试-网络篇/TCP报文头.gif" alt="TCP报文头"></p><ol><li><p><strong>端口号</strong>：用来标识同一台计算机的不同的应用进程。</p><ul><li><p><strong>源端口</strong></p><p>源端口和IP地址的作用是标识报文的返回地址。</p></li><li><p><strong>目的端口</strong></p><p>端口指明接收方计算机上的应用程序接口。</p></li></ul></li><li><p><strong>序号和确认号</strong>：是TCP可靠传输的关键部分。<strong>序号</strong>是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p></li><li><p><strong>数据偏移/首部长度</strong>：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p></li><li><p><strong>保留</strong>：为将来定义新的用途保留，现在一般置0。</p></li><li><p><strong>控制位</strong>：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p><ul><li><strong>URG</strong>：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</li><li><strong>ACK</strong>：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</li><li><strong>PSH</strong>：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</li><li><strong>RST</strong>：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</li><li><strong>SYN</strong>：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</li><li><strong>FIN</strong>：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</li></ul></li><li><p><strong>窗口</strong>：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p></li><li><p><strong>校验和</strong>：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p></li><li><p><strong>紧急指针</strong>：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p></li><li><p><strong>选项和填充</strong>：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p></li><li><p><strong>数据部分</strong>： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p></li></ol><hr><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><img src="/2019/04/15/备战面试-网络篇/TCP三次握手.png" alt="三次握手"></p><p>“握手”是为了建立连接，TCP三次握手的流程如下：</p><p><strong>第一次握手</strong>：建立连接时，客户端发送SYN包[syn=j]到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p><strong>第二次握手</strong>：服务器收到SYN包，必须确认客户的SYN[ack=j+1]，同时自己也发送一个SYN包[syn=k]，即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK[ack=k+1]，此包发送完毕，客户端和服务器进入ESTAB-LISHED状态，完成三次握手。</p><hr><h3 id="为什么需要三次握手才能建立起连接"><a href="#为什么需要三次握手才能建立起连接" class="headerlink" title="为什么需要三次握手才能建立起连接"></a>为什么需要三次握手才能建立起连接</h3><p><strong>为了初始化Sequence Number的初始值</strong></p><hr><h3 id="首次握手的隐患——SYN超时"><a href="#首次握手的隐患——SYN超时" class="headerlink" title="首次握手的隐患——SYN超时"></a>首次握手的隐患——SYN超时</h3><p><strong>问题起因分析</strong></p><ul><li><p>Server收到Client的SYN，回复SYN-ACK的时候未收到ACK确认</p></li><li><p>Server不断重试直至超时，Linux默认等待63秒才断开连接（5次重试，每次间隔时间翻倍，间隔识别分别为：1秒，2秒，4秒，8秒，16秒，第五次发出后，还需等待32秒）</p></li></ul><p><strong>针对SYN Flood的防护措施</strong></p><ul><li>SYN队列满后，通过tcp_syncookies参数回发SYN Cookie</li><li>若为正常连接则Client会回发SYN Cookie，直至建立连接</li></ul><hr><h3 id="建立连接后，Client出现故障怎么办"><a href="#建立连接后，Client出现故障怎么办" class="headerlink" title="建立连接后，Client出现故障怎么办"></a>建立连接后，Client出现故障怎么办</h3><p><strong>保活机制</strong></p><ul><li>向对方发送保活探测报文，如果未收到响应则继续发送</li><li>尝试次数达到保活探测数仍未收到响应则中断连接</li></ul><hr><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p>“挥手”是为了终止连接，TCP四次挥手的流程图如下：</p><p><img src="/2019/04/15/备战面试-网络篇/TCP四次挥手.png" alt="TCP四次挥手"></p><p><strong>第一次挥手</strong>：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态；</p><p><strong>第二次挥手</strong>：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态；</p><p><strong>第三次挥手</strong>：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态；</p><p><strong>第四次挥手</strong>：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><hr><h3 id="为什么会有TIME-WAIT状态"><a href="#为什么会有TIME-WAIT状态" class="headerlink" title="为什么会有TIME_WAIT状态"></a>为什么会有TIME_WAIT状态</h3><ul><li><p>确保有足够时间让对方收到ACK包</p></li><li><p>避免新旧连接混淆</p></li></ul><hr><h3 id="为什么需要四次握手才能断开连接"><a href="#为什么需要四次握手才能断开连接" class="headerlink" title="为什么需要四次握手才能断开连接"></a>为什么需要四次握手才能断开连接</h3><p>因为TCP是全双工的，发送方和接收方都需要FIN报文和ACK报文</p><hr><h3 id="服务器出现大量CLOSE-WAIT状态的原因"><a href="#服务器出现大量CLOSE-WAIT状态的原因" class="headerlink" title="服务器出现大量CLOSE_WAIT状态的原因"></a>服务器出现大量CLOSE_WAIT状态的原因</h3><p>对方关闭socket连接，我方忙于读或写，没有及时关闭连接</p><ul><li>检查代码，特别是释放资源的代码</li><li>检查配置，特别是处理请求的线程配置</li></ul><hr><h2 id="TCP的滑动窗口"><a href="#TCP的滑动窗口" class="headerlink" title="TCP的滑动窗口"></a>TCP的滑动窗口</h2><p><strong>TCP使用滑动窗口做流量控制与乱序重排</strong></p><ul><li>保证TCP的可靠性</li><li>保证TCP的流控特性</li></ul><h3 id="RTT和RTO"><a href="#RTT和RTO" class="headerlink" title="RTT和RTO"></a>RTT和RTO</h3><ul><li>RTT：发送一个数据包到收到对应的ACK，所花费的时间</li><li>RTO：重传时间间隔</li></ul><h3 id="窗口数据的计算过程"><a href="#窗口数据的计算过程" class="headerlink" title="窗口数据的计算过程"></a>窗口数据的计算过程</h3><p><img src="/2019/04/15/备战面试-网络篇/窗口数据的计算过程.png" alt="窗口数据的计算过程"></p><p><strong>AdvertisedWindow（接收方还可以处理的数据量） = MaxRcvBuffer（接收方能接收的最大数据量） - (LastByteRcvd - LastByteRead)</strong></p><p><strong>EffectiveWindow（窗口内剩余可发送的数据量） = AdvertisedWindow - (LastByteSend - LastByteAcked)</strong></p><h3 id="TCP的会话发送方"><a href="#TCP的会话发送方" class="headerlink" title="TCP的会话发送方"></a>TCP的会话发送方</h3><p><img src="/2019/04/15/备战面试-网络篇/TCP会话的发送方滑动窗口.png" alt="TCP会话的发送方滑动窗口"></p><h3 id="TCP的会话接收方"><a href="#TCP的会话接收方" class="headerlink" title="TCP的会话接收方"></a>TCP的会话接收方</h3><p><img src="/2019/04/15/备战面试-网络篇/TCP会话的接收方滑动窗口.png" alt="TCP会话的接收方滑动窗口"></p><hr><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="UDP报文结构"><a href="#UDP报文结构" class="headerlink" title="UDP报文结构"></a>UDP报文结构</h2><p><img src="/2019/04/15/备战面试-网络篇/UDP报文结构.png" alt="UDP报文结构"></p><hr><h2 id="UDP的特点"><a href="#UDP的特点" class="headerlink" title="UDP的特点"></a>UDP的特点</h2><ul><li>面向非连接</li><li>不维护连接状态，支持同时向多个客户端传输相同的消息</li><li>数据包报头只有8个字节，额外开销较小</li><li>吞吐量只受限于数据生成速率、传输速率以及机器性能</li><li>尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表</li><li>面向报文，不对应用程序提交的报文信息进行拆分或者合并</li></ul><hr><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><ul><li>面向连接 vs 无连接</li><li>可靠性</li><li>有序性</li><li>速度</li><li>量级</li></ul><hr><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li>支持客户/服务器模式</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ul><hr><h2 id="请求结构"><a href="#请求结构" class="headerlink" title="请求结构"></a>请求结构</h2><p><img src="/2019/04/15/备战面试-网络篇/HTTP请求结构.png" alt="HTTP请求结构"></p><hr><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><p><img src="/2019/04/15/备战面试-网络篇/HTTP响应结构.png" alt="HTTP响应结构"></p><hr><h2 id="请求-响应的步骤"><a href="#请求-响应的步骤" class="headerlink" title="请求/响应的步骤"></a>请求/响应的步骤</h2><ul><li>客户端连接到Web服务器</li><li>发送HTTP请求</li><li>服务器接受请求并返回HTTP响应</li><li>释放TCP连接</li><li>客户端浏览器解析HTML内容</li></ul><hr><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><h3 id="五种可能的情况"><a href="#五种可能的情况" class="headerlink" title="五种可能的情况"></a>五种可能的情况</h3><ul><li>1xx：指示信息，表示请求已接收，继续处理</li><li>2xx：成功，表示请求已被成功接收、理解、接受</li><li>3xx：重定向，要完成请求必须完成更进一步的操作</li><li>4xx：客户端错误，请求有语法错误或请求无法实现</li><li>5xx：服务端错误，服务器未能实现合法的请求</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 OK：正常返回信息</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务</li><li>404 Not Found：请求资源不存在，eg，输入了错误的URL</li><li>500 Internal Server Error：服务器发生不可预期的错误</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><hr><h2 id="在浏览器地址栏键入URL，按下回车之后经历的流程"><a href="#在浏览器地址栏键入URL，按下回车之后经历的流程" class="headerlink" title="在浏览器地址栏键入URL，按下回车之后经历的流程"></a>在浏览器地址栏键入URL，按下回车之后经历的流程</h2><ul><li>DNS解析(浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存)</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul><hr><h2 id="GET请求和POST请求的区别"><a href="#GET请求和POST请求的区别" class="headerlink" title="GET请求和POST请求的区别"></a>GET请求和POST请求的区别</h2><p>从三个层面来解答</p><ul><li>HTTP报文层面：GET将请求信息放在URL，POST放在报文体中</li><li>数据库层面：GET符合幂等性和安全性，POST不符合</li><li>其他层面：GET可以被缓存、被存储，而POST不行</li></ul><hr><h2 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h2><h3 id="Cookie简介"><a href="#Cookie简介" class="headerlink" title="Cookie简介"></a>Cookie简介</h3><ul><li>是由服务器发给客户端的特殊信息，以文本的形式存放在客户端</li><li>客户端再次请求的时候，会把Cookie回发</li><li>服务器接收到后，会解析Cookie生成与客户端相对应的内容</li></ul><h3 id="Cookie的设置以及发送过程"><a href="#Cookie的设置以及发送过程" class="headerlink" title="Cookie的设置以及发送过程"></a>Cookie的设置以及发送过程</h3><p><img src="/2019/04/15/备战面试-网络篇/Cookie的设置以及发送过程.png" alt="Cookie的设置以及发送过程"></p><h3 id="Session简介"><a href="#Session简介" class="headerlink" title="Session简介"></a>Session简介</h3><ul><li>服务器端的机制，在服务器上保存的信息</li><li>解析客户端请求并操作session id，按需保存状态信息</li></ul><h3 id="Session的实现方式"><a href="#Session的实现方式" class="headerlink" title="Session的实现方式"></a>Session的实现方式</h3><ul><li><p>使用Cookie来实现</p><p><img src="/2019/04/15/备战面试-网络篇/Session实现方式-使用Cookie来实现.png" alt="Session实现方式-使用Cookie来实现"></p></li><li><p>使用URL回写来实现</p></li></ul><h3 id="Cookie和Session的区别-1"><a href="#Cookie和Session的区别-1" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h3><ul><li>Cookie数据存放在客户的浏览器，Session数据放在服务器上</li><li>Session相对于Cookie更安全</li><li>若考虑减轻服务器负担，应当使用Cookie</li></ul><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 </p><h3 id="SSL（Security-Sockets-Layer，安全套接层）"><a href="#SSL（Security-Sockets-Layer，安全套接层）" class="headerlink" title="SSL（Security Sockets Layer，安全套接层）"></a>SSL（Security Sockets Layer，安全套接层）</h3><ul><li>为网络通信提供安全及数据完整性的一种安全协议</li><li>是操作系统对外的API，SSL3.0后更名为TLS</li><li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li></ul><h3 id="加密的方式"><a href="#加密的方式" class="headerlink" title="加密的方式"></a>加密的方式</h3><ul><li>对称加密：加密和解密都使用同一个密钥</li><li>非对称加密：加密使用的密钥和解密使用的密钥是不相同的（公钥、私钥）</li><li>哈希算法：将任意长度的信息转换为固定长度的值，算法不可逆</li><li>数字签名：证明某个消息或者文件是某人发出/认同的</li></ul><h3 id="HTTPS数据传输流程"><a href="#HTTPS数据传输流程" class="headerlink" title="HTTPS数据传输流程"></a>HTTPS数据传输流程</h3><ul><li>浏览器将支持的加密算法信息发送给服务器</li><li>服务器选择一套浏览器支持的加密算法，以证书的形式回发浏览器</li><li>浏览器验证证书合法性，并结合证书公钥加密信息发送给服务器</li><li>服务器使用私钥解密信息，验证哈希，加密响应消息回发浏览器</li><li>浏览器解密响应消息，并对消息进行验真，之后进行加密交互数据</li></ul><h3 id="HTTP和HTTPS的区别-1"><a href="#HTTP和HTTPS的区别-1" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h3><ul><li>HTTPS需要到CA申请证书，HTTP不需要</li><li>HTTPS密文传输，HTTP明文传输</li><li>连接方式不同，HTTP默认使用443端口，HTTP使用80端口</li><li>HTTPS = HTTP + 加密 + 认证 + 完整性保护，较HTTP安全</li></ul><h3 id="HTTPS真的很安全吗"><a href="#HTTPS真的很安全吗" class="headerlink" title="HTTPS真的很安全吗"></a>HTTPS真的很安全吗</h3><p><strong>浏览器默认填充http://，请求需要认证跳转，有被劫持的风险。可以使用HSTS(HTTP Strict Transport Security)优化。</strong></p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="Socket简介"><a href="#Socket简介" class="headerlink" title="Socket简介"></a>Socket简介</h2><p><strong>Socket是对TCP/IP协议的抽象，是操作系统对外开放的接口</strong></p><p><img src="/2019/04/15/备战面试-网络篇/Socket.png" alt="Socket"></p><h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h2><p><img src="/2019/04/15/备战面试-网络篇/Socket通信流程.png" alt="Socket通信流程"></p>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战面试-多线程篇</title>
      <link href="/2019/04/13/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/"/>
      <url>/2019/04/13/%E5%A4%87%E6%88%98%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Thread的六个状态"><a href="#Thread的六个状态" class="headerlink" title="Thread的六个状态"></a>Thread的六个状态</h3><ol><li><p><strong>新建(New):创建后尚未启动的线程的状态</strong></p></li><li><p><strong>运行(Runnable):包含Running和Ready</strong></p></li><li><p><strong>无限等待期(Waiting):不会被分配CPU执行时间，需要显式被唤醒</strong></p><blockquote><p>以下为会将线程变为无限等待期的方法：</p><ul><li>没有设置Timeout参数的Object.wait()方法</li><li>没有设置Timeout参数的Thread.join()方法</li><li>LockSupport.park()方法</li></ul></blockquote></li><li><p><strong>限期等待(Timed Waiting):在一定时间后会由系统自动唤醒</strong></p><blockquote><p>以下为会将线程变限期等待的方法：</p><ul><li>Thread.sleep()方法</li><li>设置了Timeout参数的Object.wait()方法</li><li>设置了Timeout参数的Thread.join()方法</li><li>LockSupport.parkNanos()方法</li><li>LockSupport.parkUntil()方法</li></ul></blockquote></li><li><p><strong>阻塞(Blocked):等待获取排它锁</strong></p></li><li><p><strong>结束(Terminated):已终止线程的状态，线程已经结束执行</strong></p></li></ol><hr><h3 id="sleep和wait"><a href="#sleep和wait" class="headerlink" title="sleep和wait"></a>sleep和wait</h3><ol><li>sleep()是Thread的方法，wait()是Object的方法</li><li>sleep()可以在任何地方使用，wait()只能在synchronized方法或synchronized块中使用</li><li>sleep()只会让出CPU，不会导致锁行为的改变</li><li>wait()不仅让出CPU,还会释放已经占有的同步资源锁</li></ol><hr><h3 id="notify-和notifyAll"><a href="#notify-和notifyAll" class="headerlink" title="notify()和notifyAll()"></a>notify()和notifyAll()</h3><p>​     <strong>首先了解两个概念：</strong></p><ul><li><p>锁池EntryList<br>假设线程A已经拥有了某个对象(不是类)的锁，而其它线程B、C想要调用这个对象的某个synchronized方法(或者块)，由于B、C线程在进入对象的synchronized方法(或者块)之前必须先获得该对象锁的拥有权，而恰巧该对象的锁目前正被线程A所占用，此时B、C线程就会被阻塞，进入一个地方去等待锁的释放，这个地方便是该对象的锁池</p></li><li><p>等待池WaitSet<br>假设线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁，同时线程A就进入到了该对象的等待池中，进入到等待池中的线程不会去竞争该对象的锁</p></li></ul><p><strong>notifyAll()会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</strong></p><p><strong>notify()只会随机选取一个处于等待池中的进程进入锁池去竞争获取锁的机会</strong></p><hr><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>当调用Thread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽视这个暗示。<br>yield()不会对锁造成影响</p><hr><h3 id="如何中断线程"><a href="#如何中断线程" class="headerlink" title="如何中断线程"></a>如何中断线程</h3><p>已经被抛弃的方法</p><ul><li>通过调用stop()方法停止线程</li><li>通过调用suspend()和resume()方法</li></ul><p>目前使用的方法</p><ul><li>调用interrupt()，通知线程应该中断了<ol><li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。</li><li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为true。被设置中断标志的线程将继续正常运行，不受影响。</li></ol></li><li>需要被调用的线程配合中断<ol><li>在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程。</li><li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为true</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 备战面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 面试 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
